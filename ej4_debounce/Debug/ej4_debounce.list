
ej4_debounce.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031dc  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003388  08003388  00013388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a8  080033a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033b0  080033b0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033b0  080033b0  000133b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033b4  080033b4  000133b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080033b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          000007b0  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200007c0  200007c0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e343  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ead  00000000  00000000  0002e3c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b70  00000000  00000000  00030278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008cf  00000000  00000000  00030de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024847  00000000  00000000  000316b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000db4b  00000000  00000000  00055efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dbc97  00000000  00000000  00063a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002fb8  00000000  00000000  0013f6e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00142698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003370 	.word	0x08003370

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08003370 	.word	0x08003370

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b086      	sub	sp, #24
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fcff 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f84f 	bl	8000594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f95d 	bl	80007b4 <MX_GPIO_Init>
  MX_ETH_Init();
 80004fa:	f000 f8b5 	bl	8000668 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004fe:	f000 f901 	bl	8000704 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000502:	f000 f929 	bl	8000758 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  // Tengo un arreglo de tiempos de patron
  tick_t tiempos[] = {100, 500};
 8000506:	4a21      	ldr	r2, [pc, #132]	; (800058c <main+0xa4>)
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000510:	e883 0003 	stmia.w	r3, {r0, r1}
  // Indice, indica con que periodo esta parpadeando el led
  uint8_t indice = 0;
 8000514:	2300      	movs	r3, #0
 8000516:	75fb      	strb	r3, [r7, #23]

  delay_t timer = {.startTime = 0,
 8000518:	2300      	movs	r3, #0
 800051a:	603b      	str	r3, [r7, #0]
 800051c:	2300      	movs	r3, #0
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	2300      	movs	r3, #0
 8000522:	723b      	strb	r3, [r7, #8]
                   .duration = 0,
                   .running = false};

  //Como tengo un duty cycle de 50%, hago un corrimiento del tiempo para que conmute cada medio tiempo
  delayInit(&timer,tiempos[indice]>>1);
 8000524:	7dfb      	ldrb	r3, [r7, #23]
 8000526:	009b      	lsls	r3, r3, #2
 8000528:	3318      	adds	r3, #24
 800052a:	443b      	add	r3, r7
 800052c:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000530:	085a      	lsrs	r2, r3, #1
 8000532:	463b      	mov	r3, r7
 8000534:	4611      	mov	r1, r2
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fc92 	bl	8000e60 <delayInit>
  debounceFSM_init();
 800053c:	f000 fbe4 	bl	8000d08 <debounceFSM_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
  /* USER CODE END WHILE */
  /* USER CODE BEGIN 3 */
  debounceFSM_update();    // Verifico si se apreto el boton.
 8000540:	f000 fbee 	bl	8000d20 <debounceFSM_update>

  if (delayRead(&timer)){
 8000544:	463b      	mov	r3, r7
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fc9b 	bl	8000e82 <delayRead>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d0f6      	beq.n	8000540 <main+0x58>
      HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000552:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000556:	480e      	ldr	r0, [pc, #56]	; (8000590 <main+0xa8>)
 8000558:	f001 fb4b 	bl	8001bf2 <HAL_GPIO_TogglePin>

      // Si se apreto el boton, cambiamos el indice del arreglo, y actualizamos el timer del delay
      if(readKey()){
 800055c:	f000 fc6c 	bl	8000e38 <readKey>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d002      	beq.n	800056c <main+0x84>
        	indice++;
 8000566:	7dfb      	ldrb	r3, [r7, #23]
 8000568:	3301      	adds	r3, #1
 800056a:	75fb      	strb	r3, [r7, #23]
      }
      delayWrite(&timer, tiempos[indice%2]>>1);
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	3318      	adds	r3, #24
 8000576:	443b      	add	r3, r7
 8000578:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 800057c:	085a      	lsrs	r2, r3, #1
 800057e:	463b      	mov	r3, r7
 8000580:	4611      	mov	r1, r2
 8000582:	4618      	mov	r0, r3
 8000584:	f000 fca5 	bl	8000ed2 <delayWrite>
  debounceFSM_update();    // Verifico si se apreto el boton.
 8000588:	e7da      	b.n	8000540 <main+0x58>
 800058a:	bf00      	nop
 800058c:	08003388 	.word	0x08003388
 8000590:	40020400 	.word	0x40020400

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b094      	sub	sp, #80	; 0x50
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	2230      	movs	r2, #48	; 0x30
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 feb8 	bl	8003318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	f107 030c 	add.w	r3, r7, #12
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b8:	2300      	movs	r3, #0
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	4b28      	ldr	r3, [pc, #160]	; (8000660 <SystemClock_Config+0xcc>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c0:	4a27      	ldr	r2, [pc, #156]	; (8000660 <SystemClock_Config+0xcc>)
 80005c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c6:	6413      	str	r3, [r2, #64]	; 0x40
 80005c8:	4b25      	ldr	r3, [pc, #148]	; (8000660 <SystemClock_Config+0xcc>)
 80005ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	4b22      	ldr	r3, [pc, #136]	; (8000664 <SystemClock_Config+0xd0>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <SystemClock_Config+0xd0>)
 80005de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <SystemClock_Config+0xd0>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f0:	2301      	movs	r3, #1
 80005f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000602:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000604:	2304      	movs	r3, #4
 8000606:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000608:	23a8      	movs	r3, #168	; 0xa8
 800060a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800060c:	2302      	movs	r3, #2
 800060e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000610:	2307      	movs	r3, #7
 8000612:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000614:	f107 0320 	add.w	r3, r7, #32
 8000618:	4618      	mov	r0, r3
 800061a:	f001 fc21 	bl	8001e60 <HAL_RCC_OscConfig>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000624:	f000 f974 	bl	8000910 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000628:	230f      	movs	r3, #15
 800062a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062c:	2302      	movs	r3, #2
 800062e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000634:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000638:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800063a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800063e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	2105      	movs	r1, #5
 8000646:	4618      	mov	r0, r3
 8000648:	f001 fe82 	bl	8002350 <HAL_RCC_ClockConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000652:	f000 f95d 	bl	8000910 <Error_Handler>
  }
}
 8000656:	bf00      	nop
 8000658:	3750      	adds	r7, #80	; 0x50
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40007000 	.word	0x40007000

08000668 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800066c:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <MX_ETH_Init+0x84>)
 800066e:	4a20      	ldr	r2, [pc, #128]	; (80006f0 <MX_ETH_Init+0x88>)
 8000670:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000672:	4b20      	ldr	r3, [pc, #128]	; (80006f4 <MX_ETH_Init+0x8c>)
 8000674:	2200      	movs	r2, #0
 8000676:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000678:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <MX_ETH_Init+0x8c>)
 800067a:	2280      	movs	r2, #128	; 0x80
 800067c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_ETH_Init+0x8c>)
 8000680:	22e1      	movs	r2, #225	; 0xe1
 8000682:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_ETH_Init+0x8c>)
 8000686:	2200      	movs	r2, #0
 8000688:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_ETH_Init+0x8c>)
 800068c:	2200      	movs	r2, #0
 800068e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000690:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <MX_ETH_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <MX_ETH_Init+0x84>)
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <MX_ETH_Init+0x8c>)
 800069a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <MX_ETH_Init+0x84>)
 800069e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006a2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_ETH_Init+0x84>)
 80006a6:	4a14      	ldr	r2, [pc, #80]	; (80006f8 <MX_ETH_Init+0x90>)
 80006a8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_ETH_Init+0x84>)
 80006ac:	4a13      	ldr	r2, [pc, #76]	; (80006fc <MX_ETH_Init+0x94>)
 80006ae:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_ETH_Init+0x84>)
 80006b2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006b6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <MX_ETH_Init+0x84>)
 80006ba:	f000 fd95 	bl	80011e8 <HAL_ETH_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006c4:	f000 f924 	bl	8000910 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006c8:	2238      	movs	r2, #56	; 0x38
 80006ca:	2100      	movs	r1, #0
 80006cc:	480c      	ldr	r0, [pc, #48]	; (8000700 <MX_ETH_Init+0x98>)
 80006ce:	f002 fe23 	bl	8003318 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_ETH_Init+0x98>)
 80006d4:	2221      	movs	r2, #33	; 0x21
 80006d6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_ETH_Init+0x98>)
 80006da:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80006de:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_ETH_Init+0x98>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	200001a4 	.word	0x200001a4
 80006f0:	40028000 	.word	0x40028000
 80006f4:	200007a4 	.word	0x200007a4
 80006f8:	20000104 	.word	0x20000104
 80006fc:	20000064 	.word	0x20000064
 8000700:	2000002c 	.word	0x2000002c

08000704 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000708:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <MX_USART3_UART_Init+0x50>)
 800070c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800070e:	4b10      	ldr	r3, [pc, #64]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART3_UART_Init+0x4c>)
 800073c:	f002 f828 	bl	8002790 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000746:	f000 f8e3 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	20000254 	.word	0x20000254
 8000754:	40004800 	.word	0x40004800

08000758 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000762:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000764:	4b12      	ldr	r3, [pc, #72]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000766:	2204      	movs	r2, #4
 8000768:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076c:	2202      	movs	r2, #2
 800076e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000772:	2200      	movs	r2, #0
 8000774:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000776:	4b0e      	ldr	r3, [pc, #56]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000778:	2202      	movs	r2, #2
 800077a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077e:	2201      	movs	r2, #1
 8000780:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000782:	4b0b      	ldr	r3, [pc, #44]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000788:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2201      	movs	r2, #1
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800079a:	4805      	ldr	r0, [pc, #20]	; (80007b0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	f001 fa43 	bl	8001c26 <HAL_PCD_Init>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007a6:	f000 f8b3 	bl	8000910 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	20000298 	.word	0x20000298

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08c      	sub	sp, #48	; 0x30
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
 80007ce:	4b4c      	ldr	r3, [pc, #304]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a4b      	ldr	r2, [pc, #300]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b49      	ldr	r3, [pc, #292]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	61bb      	str	r3, [r7, #24]
 80007e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	4b45      	ldr	r3, [pc, #276]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a44      	ldr	r2, [pc, #272]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b42      	ldr	r3, [pc, #264]	; (8000900 <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	4b3e      	ldr	r3, [pc, #248]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a3d      	ldr	r2, [pc, #244]	; (8000900 <MX_GPIO_Init+0x14c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b3b      	ldr	r3, [pc, #236]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	613b      	str	r3, [r7, #16]
 800081c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	4b37      	ldr	r3, [pc, #220]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a36      	ldr	r2, [pc, #216]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b34      	ldr	r3, [pc, #208]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b30      	ldr	r3, [pc, #192]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2f      	ldr	r2, [pc, #188]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b29      	ldr	r3, [pc, #164]	; (8000900 <MX_GPIO_Init+0x14c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a28      	ldr	r2, [pc, #160]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b26      	ldr	r3, [pc, #152]	; (8000900 <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000872:	2200      	movs	r2, #0
 8000874:	f244 0181 	movw	r1, #16513	; 0x4081
 8000878:	4822      	ldr	r0, [pc, #136]	; (8000904 <MX_GPIO_Init+0x150>)
 800087a:	f001 f9a1 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	4821      	ldr	r0, [pc, #132]	; (8000908 <MX_GPIO_Init+0x154>)
 8000884:	f001 f99c 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800088c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000892:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	481b      	ldr	r0, [pc, #108]	; (800090c <MX_GPIO_Init+0x158>)
 80008a0:	f000 ffca 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008a4:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008aa:	2301      	movs	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b6:	f107 031c 	add.w	r3, r7, #28
 80008ba:	4619      	mov	r1, r3
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <MX_GPIO_Init+0x150>)
 80008be:	f000 ffbb 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008c2:	2340      	movs	r3, #64	; 0x40
 80008c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d2:	f107 031c 	add.w	r3, r7, #28
 80008d6:	4619      	mov	r1, r3
 80008d8:	480b      	ldr	r0, [pc, #44]	; (8000908 <MX_GPIO_Init+0x154>)
 80008da:	f000 ffad 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008de:	2380      	movs	r3, #128	; 0x80
 80008e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e2:	2300      	movs	r3, #0
 80008e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <MX_GPIO_Init+0x154>)
 80008f2:	f000 ffa1 	bl	8001838 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	3730      	adds	r7, #48	; 0x30
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40020400 	.word	0x40020400
 8000908:	40021800 	.word	0x40021800
 800090c:	40020800 	.word	0x40020800

08000910 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000914:	b672      	cpsid	i
}
 8000916:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000918:	e7fe      	b.n	8000918 <Error_Handler+0x8>
	...

0800091c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b10      	ldr	r3, [pc, #64]	; (8000968 <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	4a0f      	ldr	r2, [pc, #60]	; (8000968 <HAL_MspInit+0x4c>)
 800092c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000930:	6453      	str	r3, [r2, #68]	; 0x44
 8000932:	4b0d      	ldr	r3, [pc, #52]	; (8000968 <HAL_MspInit+0x4c>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b09      	ldr	r3, [pc, #36]	; (8000968 <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_MspInit+0x4c>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_MspInit+0x4c>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	40023800 	.word	0x40023800

0800096c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08e      	sub	sp, #56	; 0x38
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a55      	ldr	r2, [pc, #340]	; (8000ae0 <HAL_ETH_MspInit+0x174>)
 800098a:	4293      	cmp	r3, r2
 800098c:	f040 80a4 	bne.w	8000ad8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
 8000994:	4b53      	ldr	r3, [pc, #332]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000998:	4a52      	ldr	r2, [pc, #328]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 800099a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800099e:	6313      	str	r3, [r2, #48]	; 0x30
 80009a0:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a8:	623b      	str	r3, [r7, #32]
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
 80009b0:	4b4c      	ldr	r3, [pc, #304]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a4b      	ldr	r2, [pc, #300]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30
 80009bc:	4b49      	ldr	r3, [pc, #292]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009c4:	61fb      	str	r3, [r7, #28]
 80009c6:	69fb      	ldr	r3, [r7, #28]
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	4b45      	ldr	r3, [pc, #276]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d0:	4a44      	ldr	r2, [pc, #272]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009d6:	6313      	str	r3, [r2, #48]	; 0x30
 80009d8:	4b42      	ldr	r3, [pc, #264]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009e0:	61bb      	str	r3, [r7, #24]
 80009e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ec:	4a3d      	ldr	r2, [pc, #244]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	6313      	str	r3, [r2, #48]	; 0x30
 80009f4:	4b3b      	ldr	r3, [pc, #236]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	f003 0304 	and.w	r3, r3, #4
 80009fc:	617b      	str	r3, [r7, #20]
 80009fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	4b37      	ldr	r3, [pc, #220]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a08:	4a36      	ldr	r2, [pc, #216]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a10:	4b34      	ldr	r3, [pc, #208]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	613b      	str	r3, [r7, #16]
 8000a1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	4b30      	ldr	r3, [pc, #192]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	4a2f      	ldr	r2, [pc, #188]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a26:	f043 0302 	orr.w	r3, r3, #2
 8000a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2c:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a30:	f003 0302 	and.w	r3, r3, #2
 8000a34:	60fb      	str	r3, [r7, #12]
 8000a36:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	4b29      	ldr	r3, [pc, #164]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	4a28      	ldr	r2, [pc, #160]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a46:	6313      	str	r3, [r2, #48]	; 0x30
 8000a48:	4b26      	ldr	r3, [pc, #152]	; (8000ae4 <HAL_ETH_MspInit+0x178>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a54:	2332      	movs	r3, #50	; 0x32
 8000a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a64:	230b      	movs	r3, #11
 8000a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <HAL_ETH_MspInit+0x17c>)
 8000a70:	f000 fee2 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a74:	2386      	movs	r3, #134	; 0x86
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a80:	2303      	movs	r3, #3
 8000a82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a84:	230b      	movs	r3, #11
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4817      	ldr	r0, [pc, #92]	; (8000aec <HAL_ETH_MspInit+0x180>)
 8000a90:	f000 fed2 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa6:	230b      	movs	r3, #11
 8000aa8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480f      	ldr	r0, [pc, #60]	; (8000af0 <HAL_ETH_MspInit+0x184>)
 8000ab2:	f000 fec1 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ab6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4808      	ldr	r0, [pc, #32]	; (8000af4 <HAL_ETH_MspInit+0x188>)
 8000ad4:	f000 feb0 	bl	8001838 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ad8:	bf00      	nop
 8000ada:	3738      	adds	r7, #56	; 0x38
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40028000 	.word	0x40028000
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020800 	.word	0x40020800
 8000aec:	40020000 	.word	0x40020000
 8000af0:	40020400 	.word	0x40020400
 8000af4:	40021800 	.word	0x40021800

08000af8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a19      	ldr	r2, [pc, #100]	; (8000b7c <HAL_UART_MspInit+0x84>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d12c      	bne.n	8000b74 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b18      	ldr	r3, [pc, #96]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b15      	ldr	r3, [pc, #84]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b40:	f043 0308 	orr.w	r3, r3, #8
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_UART_MspInit+0x88>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0308 	and.w	r3, r3, #8
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b64:	2307      	movs	r3, #7
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <HAL_UART_MspInit+0x8c>)
 8000b70:	f000 fe62 	bl	8001838 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40004800 	.word	0x40004800
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020c00 	.word	0x40020c00

08000b88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ba8:	d13f      	bne.n	8000c2a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	4b21      	ldr	r3, [pc, #132]	; (8000c34 <HAL_PCD_MspInit+0xac>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a20      	ldr	r2, [pc, #128]	; (8000c34 <HAL_PCD_MspInit+0xac>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b1e      	ldr	r3, [pc, #120]	; (8000c34 <HAL_PCD_MspInit+0xac>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bc6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bd8:	230a      	movs	r3, #10
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4815      	ldr	r0, [pc, #84]	; (8000c38 <HAL_PCD_MspInit+0xb0>)
 8000be4:	f000 fe28 	bl	8001838 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	480e      	ldr	r0, [pc, #56]	; (8000c38 <HAL_PCD_MspInit+0xb0>)
 8000bfe:	f000 fe1b 	bl	8001838 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c02:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <HAL_PCD_MspInit+0xac>)
 8000c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <HAL_PCD_MspInit+0xac>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0c:	6353      	str	r3, [r2, #52]	; 0x34
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_PCD_MspInit+0xac>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_PCD_MspInit+0xac>)
 8000c18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_PCD_MspInit+0xac>)
 8000c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020000 	.word	0x40020000

08000c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <NMI_Handler+0x4>

08000c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <HardFault_Handler+0x4>

08000c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c4c:	e7fe      	b.n	8000c4c <MemManage_Handler+0x4>

08000c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr

08000c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 f984 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	; (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cba:	490e      	ldr	r1, [pc, #56]	; (8000cf4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cbc:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0b      	ldr	r2, [pc, #44]	; (8000cfc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cd0:	4c0b      	ldr	r4, [pc, #44]	; (8000d00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cde:	f7ff ffd7 	bl	8000c90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f002 fb21 	bl	8003328 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fbff 	bl	80004e8 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cf8:	080033b8 	.word	0x080033b8
  ldr r2, =_sbss
 8000cfc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000d00:	200007c0 	.word	0x200007c0

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <debounceFSM_init>:
                        .running = false};
static bool_t disparo = false;

// debounceFSM_init inicializa la maquina de estados, como en su declaracion

void debounceFSM_init(){
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
    estado = BUTTON_UP;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <debounceFSM_init+0x14>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
}
 8000d12:	bf00      	nop
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	200007aa 	.word	0x200007aa

08000d20 <debounceFSM_update>:
 * presionado (BUTTON_DOWN) y suelto (BUTTON_UP), y los 2 casos de transicion ascendente (BUTTON RISING)
 * y descendente (BUTTON FALLING), y las condiciones de paso entre ellos.
 * Si se confirma la activacion del boton, se levanta la bandera de disparo.
 */

void debounceFSM_update(){
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
	switch (estado){
 8000d24:	4b3f      	ldr	r3, [pc, #252]	; (8000e24 <debounceFSM_update+0x104>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b03      	cmp	r3, #3
 8000d2a:	d879      	bhi.n	8000e20 <debounceFSM_update+0x100>
 8000d2c:	a201      	add	r2, pc, #4	; (adr r2, 8000d34 <debounceFSM_update+0x14>)
 8000d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d32:	bf00      	nop
 8000d34:	08000d45 	.word	0x08000d45
 8000d38:	08000d6f 	.word	0x08000d6f
 8000d3c:	08000db1 	.word	0x08000db1
 8000d40:	08000ddb 	.word	0x08000ddb
	case BUTTON_UP:
		if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000d44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d48:	4837      	ldr	r0, [pc, #220]	; (8000e28 <debounceFSM_update+0x108>)
 8000d4a:	f000 ff21 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d160      	bne.n	8000e16 <debounceFSM_update+0xf6>
            estado = BUTTON_FALLING;
 8000d54:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <debounceFSM_update+0x104>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
			delayInit(&rebote, espera);
 8000d5a:	4b34      	ldr	r3, [pc, #208]	; (8000e2c <debounceFSM_update+0x10c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4833      	ldr	r0, [pc, #204]	; (8000e30 <debounceFSM_update+0x110>)
 8000d62:	f000 f87d 	bl	8000e60 <delayInit>
			delayRead(&rebote);
 8000d66:	4832      	ldr	r0, [pc, #200]	; (8000e30 <debounceFSM_update+0x110>)
 8000d68:	f000 f88b 	bl	8000e82 <delayRead>
		}
		break;
 8000d6c:	e053      	b.n	8000e16 <debounceFSM_update+0xf6>
	case BUTTON_FALLING:
		if(delayRead(&rebote)){
 8000d6e:	4830      	ldr	r0, [pc, #192]	; (8000e30 <debounceFSM_update+0x110>)
 8000d70:	f000 f887 	bl	8000e82 <delayRead>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d04f      	beq.n	8000e1a <debounceFSM_update+0xfa>
    		if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000d7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d7e:	482a      	ldr	r0, [pc, #168]	; (8000e28 <debounceFSM_update+0x108>)
 8000d80:	f000 ff06 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d106      	bne.n	8000d98 <debounceFSM_update+0x78>
    			estado = BUTTON_DOWN;
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <debounceFSM_update+0x104>)
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	701a      	strb	r2, [r3, #0]
    		    disparo = true;
 8000d90:	4b28      	ldr	r3, [pc, #160]	; (8000e34 <debounceFSM_update+0x114>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	701a      	strb	r2, [r3, #0]
    		}
    		else if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET){
	    		estado = BUTTON_UP;
    		}
		}
		break;
 8000d96:	e040      	b.n	8000e1a <debounceFSM_update+0xfa>
    		else if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET){
 8000d98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d9c:	4822      	ldr	r0, [pc, #136]	; (8000e28 <debounceFSM_update+0x108>)
 8000d9e:	f000 fef7 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d138      	bne.n	8000e1a <debounceFSM_update+0xfa>
	    		estado = BUTTON_UP;
 8000da8:	4b1e      	ldr	r3, [pc, #120]	; (8000e24 <debounceFSM_update+0x104>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	701a      	strb	r2, [r3, #0]
		break;
 8000dae:	e034      	b.n	8000e1a <debounceFSM_update+0xfa>
	case BUTTON_DOWN:
		if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET){
 8000db0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db4:	481c      	ldr	r0, [pc, #112]	; (8000e28 <debounceFSM_update+0x108>)
 8000db6:	f000 feeb 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d12e      	bne.n	8000e1e <debounceFSM_update+0xfe>
            estado = BUTTON_RISING;
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <debounceFSM_update+0x104>)
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	701a      	strb	r2, [r3, #0]
			delayInit(&rebote, espera);
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <debounceFSM_update+0x10c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4818      	ldr	r0, [pc, #96]	; (8000e30 <debounceFSM_update+0x110>)
 8000dce:	f000 f847 	bl	8000e60 <delayInit>
			delayRead(&rebote);
 8000dd2:	4817      	ldr	r0, [pc, #92]	; (8000e30 <debounceFSM_update+0x110>)
 8000dd4:	f000 f855 	bl	8000e82 <delayRead>
		}
		break;
 8000dd8:	e021      	b.n	8000e1e <debounceFSM_update+0xfe>
	case BUTTON_RISING:
		if(delayRead(&rebote)){
 8000dda:	4815      	ldr	r0, [pc, #84]	; (8000e30 <debounceFSM_update+0x110>)
 8000ddc:	f000 f851 	bl	8000e82 <delayRead>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d01c      	beq.n	8000e20 <debounceFSM_update+0x100>
    		if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET){
 8000de6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dea:	480f      	ldr	r0, [pc, #60]	; (8000e28 <debounceFSM_update+0x108>)
 8000dec:	f000 fed0 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d103      	bne.n	8000dfe <debounceFSM_update+0xde>
    			estado = BUTTON_DOWN;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <debounceFSM_update+0x104>)
 8000df8:	2202      	movs	r2, #2
 8000dfa:	701a      	strb	r2, [r3, #0]
	    		estado = BUTTON_UP;
    		}
		}
	default:
	}
}
 8000dfc:	e010      	b.n	8000e20 <debounceFSM_update+0x100>
    		else if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_RESET){
 8000dfe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e02:	4809      	ldr	r0, [pc, #36]	; (8000e28 <debounceFSM_update+0x108>)
 8000e04:	f000 fec4 	bl	8001b90 <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d108      	bne.n	8000e20 <debounceFSM_update+0x100>
	    		estado = BUTTON_UP;
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <debounceFSM_update+0x104>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
}
 8000e14:	e004      	b.n	8000e20 <debounceFSM_update+0x100>
		break;
 8000e16:	bf00      	nop
 8000e18:	e002      	b.n	8000e20 <debounceFSM_update+0x100>
		break;
 8000e1a:	bf00      	nop
 8000e1c:	e000      	b.n	8000e20 <debounceFSM_update+0x100>
		break;
 8000e1e:	bf00      	nop
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200007aa 	.word	0x200007aa
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	20000004 	.word	0x20000004
 8000e30:	200007ac 	.word	0x200007ac
 8000e34:	200007b8 	.word	0x200007b8

08000e38 <readKey>:

/* readKey lee la bandera que activa el oprimir el boton. Si es verdadero, reinicia la variable
 * y retorna verdadero. Caso contrario, retorna falso.
 */
bool_t readKey(){
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
	if(disparo == true){
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <readKey+0x24>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d004      	beq.n	8000e4e <readKey+0x16>
		disparo = false;
 8000e44:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <readKey+0x24>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	701a      	strb	r2, [r3, #0]
		return true;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <readKey+0x18>
	}
	else{
		return false;
 8000e4e:	2300      	movs	r3, #0
	}
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	200007b8 	.word	0x200007b8

08000e60 <delayInit>:
 */

#include "API_delay.h"
#include "stm32f4xx_hal.h"

void delayInit(delay_t* delay, tick_t duration){
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	6039      	str	r1, [r7, #0]
    delay -> duration = duration;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	683a      	ldr	r2, [r7, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
    delay -> running = false;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2200      	movs	r2, #0
 8000e74:	721a      	strb	r2, [r3, #8]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <delayRead>:

bool_t delayRead(delay_t* delay){
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b082      	sub	sp, #8
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	6078      	str	r0, [r7, #4]
	if (delay -> running == false){
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7a1b      	ldrb	r3, [r3, #8]
 8000e8e:	f083 0301 	eor.w	r3, r3, #1
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d008      	beq.n	8000eaa <delayRead+0x28>
		delay -> startTime = HAL_GetTick();
 8000e98:	f000 f890 	bl	8000fbc <HAL_GetTick>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	601a      	str	r2, [r3, #0]
		delay -> running = true;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	721a      	strb	r2, [r3, #8]
 8000ea8:	e00e      	b.n	8000ec8 <delayRead+0x46>
	}else{
		// Calculo si paso el tiempo del delay
		if (HAL_GetTick() - delay -> startTime > delay->duration){
 8000eaa:	f000 f887 	bl	8000fbc <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	1ad2      	subs	r2, r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	429a      	cmp	r2, r3
 8000ebc:	d904      	bls.n	8000ec8 <delayRead+0x46>
			delay -> running = false;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	721a      	strb	r2, [r3, #8]
			return true;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	e000      	b.n	8000eca <delayRead+0x48>
		}
	}
	return false;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <delayWrite>:
void delayWrite(delay_t* delay, tick_t duration){
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
	delay -> duration = duration;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	; (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f931 	bl	8001180 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fcfa 	bl	800091c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	; (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f93b 	bl	80011ce <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f911 	bl	8001196 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	; (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000000 	.word	0x20000000
 8000f8c:	2000000c 	.word	0x2000000c
 8000f90:	20000008 	.word	0x20000008

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	2000000c 	.word	0x2000000c
 8000fb8:	200007bc 	.word	0x200007bc

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	200007bc 	.word	0x200007bc

08000fd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fdc:	f7ff ffee 	bl	8000fbc <HAL_GetTick>
 8000fe0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fec:	d005      	beq.n	8000ffa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fee:	4b0a      	ldr	r3, [pc, #40]	; (8001018 <HAL_Delay+0x44>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ffa:	bf00      	nop
 8000ffc:	f7ff ffde 	bl	8000fbc <HAL_GetTick>
 8001000:	4602      	mov	r2, r0
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	68fa      	ldr	r2, [r7, #12]
 8001008:	429a      	cmp	r2, r3
 800100a:	d8f7      	bhi.n	8000ffc <HAL_Delay+0x28>
  {
  }
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	2000000c 	.word	0x2000000c

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001090:	2b00      	cmp	r3, #0
 8001092:	db0a      	blt.n	80010aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	b2da      	uxtb	r2, r3
 8001098:	490c      	ldr	r1, [pc, #48]	; (80010cc <__NVIC_SetPriority+0x4c>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	0112      	lsls	r2, r2, #4
 80010a0:	b2d2      	uxtb	r2, r2
 80010a2:	440b      	add	r3, r1
 80010a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010a8:	e00a      	b.n	80010c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	b2da      	uxtb	r2, r3
 80010ae:	4908      	ldr	r1, [pc, #32]	; (80010d0 <__NVIC_SetPriority+0x50>)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	3b04      	subs	r3, #4
 80010b8:	0112      	lsls	r2, r2, #4
 80010ba:	b2d2      	uxtb	r2, r2
 80010bc:	440b      	add	r3, r1
 80010be:	761a      	strb	r2, [r3, #24]
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000e100 	.word	0xe000e100
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 0307 	and.w	r3, r3, #7
 80010e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f1c3 0307 	rsb	r3, r3, #7
 80010ee:	2b04      	cmp	r3, #4
 80010f0:	bf28      	it	cs
 80010f2:	2304      	movcs	r3, #4
 80010f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3304      	adds	r3, #4
 80010fa:	2b06      	cmp	r3, #6
 80010fc:	d902      	bls.n	8001104 <NVIC_EncodePriority+0x30>
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3b03      	subs	r3, #3
 8001102:	e000      	b.n	8001106 <NVIC_EncodePriority+0x32>
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	f04f 32ff 	mov.w	r2, #4294967295
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43da      	mvns	r2, r3
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800111c:	f04f 31ff 	mov.w	r1, #4294967295
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa01 f303 	lsl.w	r3, r1, r3
 8001126:	43d9      	mvns	r1, r3
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112c:	4313      	orrs	r3, r2
         );
}
 800112e:	4618      	mov	r0, r3
 8001130:	3724      	adds	r7, #36	; 0x24
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
	...

0800113c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3b01      	subs	r3, #1
 8001148:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800114c:	d301      	bcc.n	8001152 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800114e:	2301      	movs	r3, #1
 8001150:	e00f      	b.n	8001172 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001152:	4a0a      	ldr	r2, [pc, #40]	; (800117c <SysTick_Config+0x40>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	3b01      	subs	r3, #1
 8001158:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115a:	210f      	movs	r1, #15
 800115c:	f04f 30ff 	mov.w	r0, #4294967295
 8001160:	f7ff ff8e 	bl	8001080 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <SysTick_Config+0x40>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116a:	4b04      	ldr	r3, [pc, #16]	; (800117c <SysTick_Config+0x40>)
 800116c:	2207      	movs	r2, #7
 800116e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001170:	2300      	movs	r3, #0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	e000e010 	.word	0xe000e010

08001180 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ff47 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 800118e:	bf00      	nop
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001196:	b580      	push	{r7, lr}
 8001198:	b086      	sub	sp, #24
 800119a:	af00      	add	r7, sp, #0
 800119c:	4603      	mov	r3, r0
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011a8:	f7ff ff5c 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	68b9      	ldr	r1, [r7, #8]
 80011b2:	6978      	ldr	r0, [r7, #20]
 80011b4:	f7ff ff8e 	bl	80010d4 <NVIC_EncodePriority>
 80011b8:	4602      	mov	r2, r0
 80011ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff5d 	bl	8001080 <__NVIC_SetPriority>
}
 80011c6:	bf00      	nop
 80011c8:	3718      	adds	r7, #24
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffb0 	bl	800113c <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e06c      	b.n	80012d4 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001200:	2b00      	cmp	r3, #0
 8001202:	d106      	bne.n	8001212 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2223      	movs	r2, #35	; 0x23
 8001208:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff fbad 	bl	800096c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	4b31      	ldr	r3, [pc, #196]	; (80012dc <HAL_ETH_Init+0xf4>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a30      	ldr	r2, [pc, #192]	; (80012dc <HAL_ETH_Init+0xf4>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b2e      	ldr	r3, [pc, #184]	; (80012dc <HAL_ETH_Init+0xf4>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800122e:	4b2c      	ldr	r3, [pc, #176]	; (80012e0 <HAL_ETH_Init+0xf8>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	4a2b      	ldr	r2, [pc, #172]	; (80012e0 <HAL_ETH_Init+0xf8>)
 8001234:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001238:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800123a:	4b29      	ldr	r3, [pc, #164]	; (80012e0 <HAL_ETH_Init+0xf8>)
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	4927      	ldr	r1, [pc, #156]	; (80012e0 <HAL_ETH_Init+0xf8>)
 8001244:	4313      	orrs	r3, r2
 8001246:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001248:	4b25      	ldr	r3, [pc, #148]	; (80012e0 <HAL_ETH_Init+0xf8>)
 800124a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	f043 0301 	orr.w	r3, r3, #1
 800125e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001262:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001264:	f7ff feaa 	bl	8000fbc <HAL_GetTick>
 8001268:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800126a:	e011      	b.n	8001290 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800126c:	f7ff fea6 	bl	8000fbc <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800127a:	d909      	bls.n	8001290 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2204      	movs	r2, #4
 8001280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	22e0      	movs	r2, #224	; 0xe0
 8001288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e021      	b.n	80012d4 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0301 	and.w	r3, r3, #1
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d1e4      	bne.n	800126c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f000 f958 	bl	8001558 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f000 f9ff 	bl	80016ac <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f000 fa55 	bl	800175e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	461a      	mov	r2, r3
 80012ba:	2100      	movs	r1, #0
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f9bd 	bl	800163c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2210      	movs	r2, #16
 80012ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40013800 	.word	0x40013800

080012e4 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	4b51      	ldr	r3, [pc, #324]	; (8001440 <ETH_SetMACConfig+0x15c>)
 80012fa:	4013      	ands	r3, r2
 80012fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	7c1b      	ldrb	r3, [r3, #16]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <ETH_SetMACConfig+0x28>
 8001306:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800130a:	e000      	b.n	800130e <ETH_SetMACConfig+0x2a>
 800130c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	7c5b      	ldrb	r3, [r3, #17]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d102      	bne.n	800131c <ETH_SetMACConfig+0x38>
 8001316:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800131a:	e000      	b.n	800131e <ETH_SetMACConfig+0x3a>
 800131c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800131e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001324:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	7fdb      	ldrb	r3, [r3, #31]
 800132a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800132c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001332:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001334:	683a      	ldr	r2, [r7, #0]
 8001336:	7f92      	ldrb	r2, [r2, #30]
 8001338:	2a00      	cmp	r2, #0
 800133a:	d102      	bne.n	8001342 <ETH_SetMACConfig+0x5e>
 800133c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001340:	e000      	b.n	8001344 <ETH_SetMACConfig+0x60>
 8001342:	2200      	movs	r2, #0
                        macconf->Speed |
 8001344:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	7f1b      	ldrb	r3, [r3, #28]
 800134a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800134c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001352:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	791b      	ldrb	r3, [r3, #4]
 8001358:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800135a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001362:	2a00      	cmp	r2, #0
 8001364:	d102      	bne.n	800136c <ETH_SetMACConfig+0x88>
 8001366:	f44f 7200 	mov.w	r2, #512	; 0x200
 800136a:	e000      	b.n	800136e <ETH_SetMACConfig+0x8a>
 800136c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800136e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	7bdb      	ldrb	r3, [r3, #15]
 8001374:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001376:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800137c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001384:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001386:	4313      	orrs	r3, r2
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	4313      	orrs	r3, r2
 800138c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	68fa      	ldr	r2, [r7, #12]
 8001394:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800139e:	2001      	movs	r0, #1
 80013a0:	f7ff fe18 	bl	8000fd4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	68fa      	ldr	r2, [r7, #12]
 80013aa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80013b4:	68fa      	ldr	r2, [r7, #12]
 80013b6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80013ba:	4013      	ands	r3, r2
 80013bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80013ca:	2a00      	cmp	r2, #0
 80013cc:	d101      	bne.n	80013d2 <ETH_SetMACConfig+0xee>
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	e000      	b.n	80013d4 <ETH_SetMACConfig+0xf0>
 80013d2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80013d4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80013da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80013e2:	2a01      	cmp	r2, #1
 80013e4:	d101      	bne.n	80013ea <ETH_SetMACConfig+0x106>
 80013e6:	2208      	movs	r2, #8
 80013e8:	e000      	b.n	80013ec <ETH_SetMACConfig+0x108>
 80013ea:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80013ec:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80013f4:	2a01      	cmp	r2, #1
 80013f6:	d101      	bne.n	80013fc <ETH_SetMACConfig+0x118>
 80013f8:	2204      	movs	r2, #4
 80013fa:	e000      	b.n	80013fe <ETH_SetMACConfig+0x11a>
 80013fc:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80013fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001406:	2a01      	cmp	r2, #1
 8001408:	d101      	bne.n	800140e <ETH_SetMACConfig+0x12a>
 800140a:	2202      	movs	r2, #2
 800140c:	e000      	b.n	8001410 <ETH_SetMACConfig+0x12c>
 800140e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001410:	4313      	orrs	r3, r2
 8001412:	68fa      	ldr	r2, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68fa      	ldr	r2, [r7, #12]
 800141e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	699b      	ldr	r3, [r3, #24]
 8001426:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fdd3 	bl	8000fd4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	68fa      	ldr	r2, [r7, #12]
 8001434:	619a      	str	r2, [r3, #24]
}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	ff20810f 	.word	0xff20810f

08001444 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	4b3d      	ldr	r3, [pc, #244]	; (8001554 <ETH_SetDMAConfig+0x110>)
 800145e:	4013      	ands	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	7b1b      	ldrb	r3, [r3, #12]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d102      	bne.n	8001470 <ETH_SetDMAConfig+0x2c>
 800146a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800146e:	e000      	b.n	8001472 <ETH_SetDMAConfig+0x2e>
 8001470:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	7b5b      	ldrb	r3, [r3, #13]
 8001476:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001478:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800147a:	683a      	ldr	r2, [r7, #0]
 800147c:	7f52      	ldrb	r2, [r2, #29]
 800147e:	2a00      	cmp	r2, #0
 8001480:	d102      	bne.n	8001488 <ETH_SetDMAConfig+0x44>
 8001482:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001486:	e000      	b.n	800148a <ETH_SetDMAConfig+0x46>
 8001488:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800148a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	7b9b      	ldrb	r3, [r3, #14]
 8001490:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001492:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001498:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	7f1b      	ldrb	r3, [r3, #28]
 800149e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80014a0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	7f9b      	ldrb	r3, [r3, #30]
 80014a6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80014a8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80014ae:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014b6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80014b8:	4313      	orrs	r3, r2
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	4313      	orrs	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014c8:	461a      	mov	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff fd7a 	bl	8000fd4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014e8:	461a      	mov	r2, r3
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	791b      	ldrb	r3, [r3, #4]
 80014f2:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80014f8:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80014fe:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001504:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800150c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800150e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001516:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800151c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001526:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800152a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001538:	2001      	movs	r0, #1
 800153a:	f7ff fd4b 	bl	8000fd4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001546:	461a      	mov	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6013      	str	r3, [r2, #0]
}
 800154c:	bf00      	nop
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	f8de3f23 	.word	0xf8de3f23

08001558 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b0a6      	sub	sp, #152	; 0x98
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001560:	2301      	movs	r3, #1
 8001562:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001566:	2301      	movs	r3, #1
 8001568:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800156c:	2300      	movs	r3, #0
 800156e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001576:	2301      	movs	r3, #1
 8001578:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001582:	2301      	movs	r3, #1
 8001584:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001594:	2300      	movs	r3, #0
 8001596:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800159e:	2300      	movs	r3, #0
 80015a0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015a8:	2300      	movs	r3, #0
 80015aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80015ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015be:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80015c0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80015cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015d0:	4619      	mov	r1, r3
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f7ff fe86 	bl	80012e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80015d8:	2301      	movs	r3, #1
 80015da:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80015dc:	2301      	movs	r3, #1
 80015de:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80015e0:	2301      	movs	r3, #1
 80015e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80015e6:	2301      	movs	r3, #1
 80015e8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80015fa:	2300      	movs	r3, #0
 80015fc:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80015fe:	2301      	movs	r3, #1
 8001600:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001604:	2301      	movs	r3, #1
 8001606:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001608:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800160c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800160e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001612:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001614:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001618:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001624:	2300      	movs	r3, #0
 8001626:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001628:	f107 0308 	add.w	r3, r7, #8
 800162c:	4619      	mov	r1, r3
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	f7ff ff08 	bl	8001444 <ETH_SetDMAConfig>
}
 8001634:	bf00      	nop
 8001636:	3798      	adds	r7, #152	; 0x98
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}

0800163c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3305      	adds	r3, #5
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	3204      	adds	r2, #4
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	4313      	orrs	r3, r2
 8001658:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	4b11      	ldr	r3, [pc, #68]	; (80016a4 <ETH_MACAddressConfig+0x68>)
 800165e:	4413      	add	r3, r2
 8001660:	461a      	mov	r2, r3
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3303      	adds	r3, #3
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	061a      	lsls	r2, r3, #24
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3302      	adds	r3, #2
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	041b      	lsls	r3, r3, #16
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3301      	adds	r3, #1
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	021b      	lsls	r3, r3, #8
 8001680:	4313      	orrs	r3, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	7812      	ldrb	r2, [r2, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <ETH_MACAddressConfig+0x6c>)
 800168e:	4413      	add	r3, r2
 8001690:	461a      	mov	r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	6013      	str	r3, [r2, #0]
}
 8001696:	bf00      	nop
 8001698:	371c      	adds	r7, #28
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	40028040 	.word	0x40028040
 80016a8:	40028044 	.word	0x40028044

080016ac <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e03e      	b.n	8001738 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68d9      	ldr	r1, [r3, #12]
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2200      	movs	r2, #0
 80016d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68fa      	ldr	r2, [r7, #12]
 80016ea:	3206      	adds	r2, #6
 80016ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d80c      	bhi.n	800171c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68d9      	ldr	r1, [r3, #12]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	4613      	mov	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	4413      	add	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	440b      	add	r3, r1
 8001714:	461a      	mov	r2, r3
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	e004      	b.n	8001726 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	461a      	mov	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001726:	68bb      	ldr	r3, [r7, #8]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	3301      	adds	r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b03      	cmp	r3, #3
 800173c:	d9bd      	bls.n	80016ba <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68da      	ldr	r2, [r3, #12]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001750:	611a      	str	r2, [r3, #16]
}
 8001752:	bf00      	nop
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800175e:	b480      	push	{r7}
 8001760:	b085      	sub	sp, #20
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001766:	2300      	movs	r3, #0
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	e046      	b.n	80017fa <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6919      	ldr	r1, [r3, #16]
 8001770:	68fa      	ldr	r2, [r7, #12]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	00db      	lsls	r3, r3, #3
 800177a:	440b      	add	r3, r1
 800177c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2200      	movs	r2, #0
 800178e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2200      	movs	r2, #0
 8001794:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	2200      	movs	r2, #0
 800179a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2200      	movs	r2, #0
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017a8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017b0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80017be:	68b9      	ldr	r1, [r7, #8]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68fa      	ldr	r2, [r7, #12]
 80017c4:	3212      	adds	r2, #18
 80017c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d80c      	bhi.n	80017ea <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6919      	ldr	r1, [r3, #16]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	1c5a      	adds	r2, r3, #1
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	440b      	add	r3, r1
 80017e2:	461a      	mov	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	e004      	b.n	80017f4 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	691b      	ldr	r3, [r3, #16]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	3301      	adds	r3, #1
 80017f8:	60fb      	str	r3, [r7, #12]
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d9b5      	bls.n	800176c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2200      	movs	r2, #0
 8001804:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2200      	movs	r2, #0
 800181c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691a      	ldr	r2, [r3, #16]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182a:	60da      	str	r2, [r3, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	; 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001846:	2300      	movs	r3, #0
 8001848:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800184e:	2300      	movs	r3, #0
 8001850:	61fb      	str	r3, [r7, #28]
 8001852:	e177      	b.n	8001b44 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001854:	2201      	movs	r2, #1
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	4013      	ands	r3, r2
 8001866:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	429a      	cmp	r2, r3
 800186e:	f040 8166 	bne.w	8001b3e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d005      	beq.n	800188a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001886:	2b02      	cmp	r3, #2
 8001888:	d130      	bne.n	80018ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	2203      	movs	r2, #3
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	68da      	ldr	r2, [r3, #12]
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	005b      	lsls	r3, r3, #1
 80018aa:	fa02 f303 	lsl.w	r3, r2, r3
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43db      	mvns	r3, r3
 80018ca:	69ba      	ldr	r2, [r7, #24]
 80018cc:	4013      	ands	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 0201 	and.w	r2, r3, #1
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	f003 0303 	and.w	r3, r3, #3
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d017      	beq.n	8001928 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	68db      	ldr	r3, [r3, #12]
 80018fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	2203      	movs	r2, #3
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d123      	bne.n	800197c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	08da      	lsrs	r2, r3, #3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3208      	adds	r2, #8
 800193c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f003 0307 	and.w	r3, r3, #7
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	220f      	movs	r2, #15
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	691a      	ldr	r2, [r3, #16]
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	fa02 f303 	lsl.w	r3, r2, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	08da      	lsrs	r2, r3, #3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3208      	adds	r2, #8
 8001976:	69b9      	ldr	r1, [r7, #24]
 8001978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	2203      	movs	r2, #3
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0203 	and.w	r2, r3, #3
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	f000 80c0 	beq.w	8001b3e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	4b66      	ldr	r3, [pc, #408]	; (8001b5c <HAL_GPIO_Init+0x324>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a65      	ldr	r2, [pc, #404]	; (8001b5c <HAL_GPIO_Init+0x324>)
 80019c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b63      	ldr	r3, [pc, #396]	; (8001b5c <HAL_GPIO_Init+0x324>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019da:	4a61      	ldr	r2, [pc, #388]	; (8001b60 <HAL_GPIO_Init+0x328>)
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	089b      	lsrs	r3, r3, #2
 80019e0:	3302      	adds	r3, #2
 80019e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0303 	and.w	r3, r3, #3
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	220f      	movs	r2, #15
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	4013      	ands	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a58      	ldr	r2, [pc, #352]	; (8001b64 <HAL_GPIO_Init+0x32c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d037      	beq.n	8001a76 <HAL_GPIO_Init+0x23e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a57      	ldr	r2, [pc, #348]	; (8001b68 <HAL_GPIO_Init+0x330>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d031      	beq.n	8001a72 <HAL_GPIO_Init+0x23a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a56      	ldr	r2, [pc, #344]	; (8001b6c <HAL_GPIO_Init+0x334>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d02b      	beq.n	8001a6e <HAL_GPIO_Init+0x236>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a55      	ldr	r2, [pc, #340]	; (8001b70 <HAL_GPIO_Init+0x338>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d025      	beq.n	8001a6a <HAL_GPIO_Init+0x232>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a54      	ldr	r2, [pc, #336]	; (8001b74 <HAL_GPIO_Init+0x33c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d01f      	beq.n	8001a66 <HAL_GPIO_Init+0x22e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a53      	ldr	r2, [pc, #332]	; (8001b78 <HAL_GPIO_Init+0x340>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d019      	beq.n	8001a62 <HAL_GPIO_Init+0x22a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a52      	ldr	r2, [pc, #328]	; (8001b7c <HAL_GPIO_Init+0x344>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d013      	beq.n	8001a5e <HAL_GPIO_Init+0x226>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a51      	ldr	r2, [pc, #324]	; (8001b80 <HAL_GPIO_Init+0x348>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d00d      	beq.n	8001a5a <HAL_GPIO_Init+0x222>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a50      	ldr	r2, [pc, #320]	; (8001b84 <HAL_GPIO_Init+0x34c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d007      	beq.n	8001a56 <HAL_GPIO_Init+0x21e>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4f      	ldr	r2, [pc, #316]	; (8001b88 <HAL_GPIO_Init+0x350>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d101      	bne.n	8001a52 <HAL_GPIO_Init+0x21a>
 8001a4e:	2309      	movs	r3, #9
 8001a50:	e012      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a52:	230a      	movs	r3, #10
 8001a54:	e010      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a56:	2308      	movs	r3, #8
 8001a58:	e00e      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a5a:	2307      	movs	r3, #7
 8001a5c:	e00c      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a5e:	2306      	movs	r3, #6
 8001a60:	e00a      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a62:	2305      	movs	r3, #5
 8001a64:	e008      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a66:	2304      	movs	r3, #4
 8001a68:	e006      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e004      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a6e:	2302      	movs	r3, #2
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a72:	2301      	movs	r3, #1
 8001a74:	e000      	b.n	8001a78 <HAL_GPIO_Init+0x240>
 8001a76:	2300      	movs	r3, #0
 8001a78:	69fa      	ldr	r2, [r7, #28]
 8001a7a:	f002 0203 	and.w	r2, r2, #3
 8001a7e:	0092      	lsls	r2, r2, #2
 8001a80:	4093      	lsls	r3, r2
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a88:	4935      	ldr	r1, [pc, #212]	; (8001b60 <HAL_GPIO_Init+0x328>)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a96:	4b3d      	ldr	r3, [pc, #244]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001aba:	4a34      	ldr	r2, [pc, #208]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac0:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ae4:	4a29      	ldr	r2, [pc, #164]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aea:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b0e:	4a1f      	ldr	r2, [pc, #124]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b38:	4a14      	ldr	r2, [pc, #80]	; (8001b8c <HAL_GPIO_Init+0x354>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3301      	adds	r3, #1
 8001b42:	61fb      	str	r3, [r7, #28]
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	2b0f      	cmp	r3, #15
 8001b48:	f67f ae84 	bls.w	8001854 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3724      	adds	r7, #36	; 0x24
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40023800 	.word	0x40023800
 8001b60:	40013800 	.word	0x40013800
 8001b64:	40020000 	.word	0x40020000
 8001b68:	40020400 	.word	0x40020400
 8001b6c:	40020800 	.word	0x40020800
 8001b70:	40020c00 	.word	0x40020c00
 8001b74:	40021000 	.word	0x40021000
 8001b78:	40021400 	.word	0x40021400
 8001b7c:	40021800 	.word	0x40021800
 8001b80:	40021c00 	.word	0x40021c00
 8001b84:	40022000 	.word	0x40022000
 8001b88:	40022400 	.word	0x40022400
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b085      	sub	sp, #20
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c04:	887a      	ldrh	r2, [r7, #2]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	041a      	lsls	r2, r3, #16
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	887b      	ldrh	r3, [r7, #2]
 8001c12:	400b      	ands	r3, r1
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	619a      	str	r2, [r3, #24]
}
 8001c1a:	bf00      	nop
 8001c1c:	3714      	adds	r7, #20
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001c26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c28:	b08f      	sub	sp, #60	; 0x3c
 8001c2a:	af0a      	add	r7, sp, #40	; 0x28
 8001c2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e10f      	b.n	8001e58 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d106      	bne.n	8001c58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7fe ff98 	bl	8000b88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f001 f8ad 	bl	8002dd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	687e      	ldr	r6, [r7, #4]
 8001c84:	466d      	mov	r5, sp
 8001c86:	f106 0410 	add.w	r4, r6, #16
 8001c8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c96:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c9a:	1d33      	adds	r3, r6, #4
 8001c9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c9e:	6838      	ldr	r0, [r7, #0]
 8001ca0:	f001 f838 	bl	8002d14 <USB_CoreInit>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d005      	beq.n	8001cb6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2202      	movs	r2, #2
 8001cae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e0d0      	b.n	8001e58 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2100      	movs	r1, #0
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f001 f89b 	bl	8002df8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
 8001cc6:	e04a      	b.n	8001d5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001cc8:	7bfa      	ldrb	r2, [r7, #15]
 8001cca:	6879      	ldr	r1, [r7, #4]
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	440b      	add	r3, r1
 8001cd6:	333d      	adds	r3, #61	; 0x3d
 8001cd8:	2201      	movs	r2, #1
 8001cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	333c      	adds	r3, #60	; 0x3c
 8001cec:	7bfa      	ldrb	r2, [r7, #15]
 8001cee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	b298      	uxth	r0, r3
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	00db      	lsls	r3, r3, #3
 8001cfc:	4413      	add	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	440b      	add	r3, r1
 8001d02:	3344      	adds	r3, #68	; 0x44
 8001d04:	4602      	mov	r2, r0
 8001d06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	00db      	lsls	r3, r3, #3
 8001d10:	4413      	add	r3, r2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	440b      	add	r3, r1
 8001d16:	3340      	adds	r3, #64	; 0x40
 8001d18:	2200      	movs	r2, #0
 8001d1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001d1c:	7bfa      	ldrb	r2, [r7, #15]
 8001d1e:	6879      	ldr	r1, [r7, #4]
 8001d20:	4613      	mov	r3, r2
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	4413      	add	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	440b      	add	r3, r1
 8001d2a:	3348      	adds	r3, #72	; 0x48
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001d30:	7bfa      	ldrb	r2, [r7, #15]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	00db      	lsls	r3, r3, #3
 8001d38:	4413      	add	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	334c      	adds	r3, #76	; 0x4c
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001d44:	7bfa      	ldrb	r2, [r7, #15]
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	00db      	lsls	r3, r3, #3
 8001d4c:	4413      	add	r3, r2
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	440b      	add	r3, r1
 8001d52:	3354      	adds	r3, #84	; 0x54
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
 8001d5e:	7bfa      	ldrb	r2, [r7, #15]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d3af      	bcc.n	8001cc8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e044      	b.n	8001df8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	6879      	ldr	r1, [r7, #4]
 8001d72:	4613      	mov	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d96:	7bfa      	ldrb	r2, [r7, #15]
 8001d98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d9a:	7bfa      	ldrb	r2, [r7, #15]
 8001d9c:	6879      	ldr	r1, [r7, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001dc6:	7bfa      	ldrb	r2, [r7, #15]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	00db      	lsls	r3, r3, #3
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001ddc:	7bfa      	ldrb	r2, [r7, #15]
 8001dde:	6879      	ldr	r1, [r7, #4]
 8001de0:	4613      	mov	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4413      	add	r3, r2
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	440b      	add	r3, r1
 8001dea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001df2:	7bfb      	ldrb	r3, [r7, #15]
 8001df4:	3301      	adds	r3, #1
 8001df6:	73fb      	strb	r3, [r7, #15]
 8001df8:	7bfa      	ldrb	r2, [r7, #15]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d3b5      	bcc.n	8001d6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	603b      	str	r3, [r7, #0]
 8001e08:	687e      	ldr	r6, [r7, #4]
 8001e0a:	466d      	mov	r5, sp
 8001e0c:	f106 0410 	add.w	r4, r6, #16
 8001e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e20:	1d33      	adds	r3, r6, #4
 8001e22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e24:	6838      	ldr	r0, [r7, #0]
 8001e26:	f001 f833 	bl	8002e90 <USB_DevInit>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2202      	movs	r2, #2
 8001e34:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e00d      	b.n	8001e58 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f001 f9fe 	bl	8003252 <USB_DevDisconnect>

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e267      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d075      	beq.n	8001f6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e7e:	4b88      	ldr	r3, [pc, #544]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f003 030c 	and.w	r3, r3, #12
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	d00c      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e8a:	4b85      	ldr	r3, [pc, #532]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e92:	2b08      	cmp	r3, #8
 8001e94:	d112      	bne.n	8001ebc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e96:	4b82      	ldr	r3, [pc, #520]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ea2:	d10b      	bne.n	8001ebc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ea4:	4b7e      	ldr	r3, [pc, #504]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d05b      	beq.n	8001f68 <HAL_RCC_OscConfig+0x108>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d157      	bne.n	8001f68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e242      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ec4:	d106      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x74>
 8001ec6:	4b76      	ldr	r3, [pc, #472]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a75      	ldr	r2, [pc, #468]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e01d      	b.n	8001f10 <HAL_RCC_OscConfig+0xb0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x98>
 8001ede:	4b70      	ldr	r3, [pc, #448]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6f      	ldr	r2, [pc, #444]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b6d      	ldr	r3, [pc, #436]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a6c      	ldr	r2, [pc, #432]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0xb0>
 8001ef8:	4b69      	ldr	r3, [pc, #420]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a68      	ldr	r2, [pc, #416]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001efe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b66      	ldr	r3, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a65      	ldr	r2, [pc, #404]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff f850 	bl	8000fbc <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff f84c 	bl	8000fbc <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	; 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e207      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b5b      	ldr	r3, [pc, #364]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0xc0>
 8001f3e:	e014      	b.n	8001f6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff f83c 	bl	8000fbc <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff f838 	bl	8000fbc <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	; 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1f3      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	4b51      	ldr	r3, [pc, #324]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0xe8>
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d063      	beq.n	800203e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f76:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d11c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f8e:	4b44      	ldr	r3, [pc, #272]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d116      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	4b41      	ldr	r3, [pc, #260]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x152>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e1c7      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb2:	4b3b      	ldr	r3, [pc, #236]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4937      	ldr	r1, [pc, #220]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	e03a      	b.n	800203e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	4b34      	ldr	r3, [pc, #208]	; (80020a4 <HAL_RCC_OscConfig+0x244>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd6:	f7fe fff1 	bl	8000fbc <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fde:	f7fe ffed 	bl	8000fbc <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e1a8      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b28      	ldr	r3, [pc, #160]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4925      	ldr	r1, [pc, #148]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
 8002010:	e015      	b.n	800203e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_OscConfig+0x244>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002018:	f7fe ffd0 	bl	8000fbc <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002020:	f7fe ffcc 	bl	8000fbc <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e187      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	4b1b      	ldr	r3, [pc, #108]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d036      	beq.n	80020b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d016      	beq.n	8002080 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002052:	4b15      	ldr	r3, [pc, #84]	; (80020a8 <HAL_RCC_OscConfig+0x248>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002058:	f7fe ffb0 	bl	8000fbc <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002060:	f7fe ffac 	bl	8000fbc <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e167      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <HAL_RCC_OscConfig+0x240>)
 8002074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x200>
 800207e:	e01b      	b.n	80020b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_OscConfig+0x248>)
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002086:	f7fe ff99 	bl	8000fbc <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800208c:	e00e      	b.n	80020ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800208e:	f7fe ff95 	bl	8000fbc <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d907      	bls.n	80020ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e150      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
 80020a0:	40023800 	.word	0x40023800
 80020a4:	42470000 	.word	0x42470000
 80020a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	4b88      	ldr	r3, [pc, #544]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80020ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d1ea      	bne.n	800208e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8097 	beq.w	80021f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c6:	2300      	movs	r3, #0
 80020c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ca:	4b81      	ldr	r3, [pc, #516]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10f      	bne.n	80020f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	4b7d      	ldr	r3, [pc, #500]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	4a7c      	ldr	r2, [pc, #496]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6413      	str	r3, [r2, #64]	; 0x40
 80020e6:	4b7a      	ldr	r3, [pc, #488]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	60bb      	str	r3, [r7, #8]
 80020f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f2:	2301      	movs	r3, #1
 80020f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f6:	4b77      	ldr	r3, [pc, #476]	; (80022d4 <HAL_RCC_OscConfig+0x474>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d118      	bne.n	8002134 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002102:	4b74      	ldr	r3, [pc, #464]	; (80022d4 <HAL_RCC_OscConfig+0x474>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a73      	ldr	r2, [pc, #460]	; (80022d4 <HAL_RCC_OscConfig+0x474>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210e:	f7fe ff55 	bl	8000fbc <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7fe ff51 	bl	8000fbc <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e10c      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	4b6a      	ldr	r3, [pc, #424]	; (80022d4 <HAL_RCC_OscConfig+0x474>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d106      	bne.n	800214a <HAL_RCC_OscConfig+0x2ea>
 800213c:	4b64      	ldr	r3, [pc, #400]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 800213e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002140:	4a63      	ldr	r2, [pc, #396]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6713      	str	r3, [r2, #112]	; 0x70
 8002148:	e01c      	b.n	8002184 <HAL_RCC_OscConfig+0x324>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b05      	cmp	r3, #5
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x30c>
 8002152:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002156:	4a5e      	ldr	r2, [pc, #376]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	6713      	str	r3, [r2, #112]	; 0x70
 800215e:	4b5c      	ldr	r3, [pc, #368]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a5b      	ldr	r2, [pc, #364]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0x324>
 800216c:	4b58      	ldr	r3, [pc, #352]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 800216e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002170:	4a57      	ldr	r2, [pc, #348]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002172:	f023 0301 	bic.w	r3, r3, #1
 8002176:	6713      	str	r3, [r2, #112]	; 0x70
 8002178:	4b55      	ldr	r3, [pc, #340]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a54      	ldr	r2, [pc, #336]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 800217e:	f023 0304 	bic.w	r3, r3, #4
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d015      	beq.n	80021b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7fe ff16 	bl	8000fbc <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002192:	e00a      	b.n	80021aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002194:	f7fe ff12 	bl	8000fbc <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e0cb      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021aa:	4b49      	ldr	r3, [pc, #292]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0ee      	beq.n	8002194 <HAL_RCC_OscConfig+0x334>
 80021b6:	e014      	b.n	80021e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b8:	f7fe ff00 	bl	8000fbc <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021be:	e00a      	b.n	80021d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021c0:	f7fe fefc 	bl	8000fbc <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e0b5      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d6:	4b3e      	ldr	r3, [pc, #248]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80021d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1ee      	bne.n	80021c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e8:	4b39      	ldr	r3, [pc, #228]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	4a38      	ldr	r2, [pc, #224]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80021ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80a1 	beq.w	8002340 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b08      	cmp	r3, #8
 8002208:	d05c      	beq.n	80022c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b02      	cmp	r3, #2
 8002210:	d141      	bne.n	8002296 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002212:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_RCC_OscConfig+0x478>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002218:	f7fe fed0 	bl	8000fbc <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800221e:	e008      	b.n	8002232 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002220:	f7fe fecc 	bl	8000fbc <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d901      	bls.n	8002232 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e087      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f0      	bne.n	8002220 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69da      	ldr	r2, [r3, #28]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a1b      	ldr	r3, [r3, #32]
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	019b      	lsls	r3, r3, #6
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	3b01      	subs	r3, #1
 8002258:	041b      	lsls	r3, r3, #16
 800225a:	431a      	orrs	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002260:	061b      	lsls	r3, r3, #24
 8002262:	491b      	ldr	r1, [pc, #108]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 8002264:	4313      	orrs	r3, r2
 8002266:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002268:	4b1b      	ldr	r3, [pc, #108]	; (80022d8 <HAL_RCC_OscConfig+0x478>)
 800226a:	2201      	movs	r2, #1
 800226c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226e:	f7fe fea5 	bl	8000fbc <HAL_GetTick>
 8002272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe fea1 	bl	8000fbc <HAL_GetTick>
 800227a:	4602      	mov	r2, r0
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b02      	cmp	r3, #2
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e05c      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002288:	4b11      	ldr	r3, [pc, #68]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0x416>
 8002294:	e054      	b.n	8002340 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <HAL_RCC_OscConfig+0x478>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe fe8e 	bl	8000fbc <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022a4:	f7fe fe8a 	bl	8000fbc <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e045      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <HAL_RCC_OscConfig+0x470>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x444>
 80022c2:	e03d      	b.n	8002340 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d107      	bne.n	80022dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e038      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
 80022d0:	40023800 	.word	0x40023800
 80022d4:	40007000 	.word	0x40007000
 80022d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022dc:	4b1b      	ldr	r3, [pc, #108]	; (800234c <HAL_RCC_OscConfig+0x4ec>)
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d028      	beq.n	800233c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d121      	bne.n	800233c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002302:	429a      	cmp	r2, r3
 8002304:	d11a      	bne.n	800233c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800230c:	4013      	ands	r3, r2
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002314:	4293      	cmp	r3, r2
 8002316:	d111      	bne.n	800233c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	085b      	lsrs	r3, r3, #1
 8002324:	3b01      	subs	r3, #1
 8002326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002328:	429a      	cmp	r2, r3
 800232a:	d107      	bne.n	800233c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002338:	429a      	cmp	r2, r3
 800233a:	d001      	beq.n	8002340 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023800 	.word	0x40023800

08002350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0cc      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b68      	ldr	r3, [pc, #416]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 030f 	and.w	r3, r3, #15
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d90c      	bls.n	800238c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b65      	ldr	r3, [pc, #404]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002374:	683a      	ldr	r2, [r7, #0]
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800237a:	4b63      	ldr	r3, [pc, #396]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	683a      	ldr	r2, [r7, #0]
 8002384:	429a      	cmp	r2, r3
 8002386:	d001      	beq.n	800238c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0b8      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d020      	beq.n	80023da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a4:	4b59      	ldr	r3, [pc, #356]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4a58      	ldr	r2, [pc, #352]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0308 	and.w	r3, r3, #8
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023bc:	4b53      	ldr	r3, [pc, #332]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c8:	4b50      	ldr	r3, [pc, #320]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	494d      	ldr	r1, [pc, #308]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d044      	beq.n	8002470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ee:	4b47      	ldr	r3, [pc, #284]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d119      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e07f      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b02      	cmp	r3, #2
 8002404:	d003      	beq.n	800240e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240a:	2b03      	cmp	r3, #3
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b3f      	ldr	r3, [pc, #252]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e06f      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e067      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242e:	4b37      	ldr	r3, [pc, #220]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f023 0203 	bic.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4934      	ldr	r1, [pc, #208]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	4313      	orrs	r3, r2
 800243e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002440:	f7fe fdbc 	bl	8000fbc <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7fe fdb8 	bl	8000fbc <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	; 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e04f      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2b      	ldr	r3, [pc, #172]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	f003 020c 	and.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d1eb      	bne.n	8002448 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d20c      	bcs.n	8002498 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b22      	ldr	r3, [pc, #136]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	683a      	ldr	r2, [r7, #0]
 8002482:	b2d2      	uxtb	r2, r2
 8002484:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b20      	ldr	r3, [pc, #128]	; (8002508 <HAL_RCC_ClockConfig+0x1b8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e032      	b.n	80024fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	4916      	ldr	r1, [pc, #88]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c2:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	00db      	lsls	r3, r3, #3
 80024d0:	490e      	ldr	r1, [pc, #56]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024d6:	f000 f821 	bl	800251c <HAL_RCC_GetSysClockFreq>
 80024da:	4602      	mov	r2, r0
 80024dc:	4b0b      	ldr	r3, [pc, #44]	; (800250c <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	091b      	lsrs	r3, r3, #4
 80024e2:	f003 030f 	and.w	r3, r3, #15
 80024e6:	490a      	ldr	r1, [pc, #40]	; (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 80024e8:	5ccb      	ldrb	r3, [r1, r3]
 80024ea:	fa22 f303 	lsr.w	r3, r2, r3
 80024ee:	4a09      	ldr	r2, [pc, #36]	; (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fd1c 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	40023c00 	.word	0x40023c00
 800250c:	40023800 	.word	0x40023800
 8002510:	08003390 	.word	0x08003390
 8002514:	20000000 	.word	0x20000000
 8002518:	20000008 	.word	0x20000008

0800251c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800251c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002520:	b094      	sub	sp, #80	; 0x50
 8002522:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	647b      	str	r3, [r7, #68]	; 0x44
 8002528:	2300      	movs	r3, #0
 800252a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800252c:	2300      	movs	r3, #0
 800252e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002534:	4b79      	ldr	r3, [pc, #484]	; (800271c <HAL_RCC_GetSysClockFreq+0x200>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b08      	cmp	r3, #8
 800253e:	d00d      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0x40>
 8002540:	2b08      	cmp	r3, #8
 8002542:	f200 80e1 	bhi.w	8002708 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002546:	2b00      	cmp	r3, #0
 8002548:	d002      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x34>
 800254a:	2b04      	cmp	r3, #4
 800254c:	d003      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0x3a>
 800254e:	e0db      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002550:	4b73      	ldr	r3, [pc, #460]	; (8002720 <HAL_RCC_GetSysClockFreq+0x204>)
 8002552:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002554:	e0db      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002556:	4b73      	ldr	r3, [pc, #460]	; (8002724 <HAL_RCC_GetSysClockFreq+0x208>)
 8002558:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800255a:	e0d8      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800255c:	4b6f      	ldr	r3, [pc, #444]	; (800271c <HAL_RCC_GetSysClockFreq+0x200>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002564:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002566:	4b6d      	ldr	r3, [pc, #436]	; (800271c <HAL_RCC_GetSysClockFreq+0x200>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d063      	beq.n	800263a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002572:	4b6a      	ldr	r3, [pc, #424]	; (800271c <HAL_RCC_GetSysClockFreq+0x200>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	099b      	lsrs	r3, r3, #6
 8002578:	2200      	movs	r2, #0
 800257a:	63bb      	str	r3, [r7, #56]	; 0x38
 800257c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800257e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002580:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
 8002586:	2300      	movs	r3, #0
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
 800258a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800258e:	4622      	mov	r2, r4
 8002590:	462b      	mov	r3, r5
 8002592:	f04f 0000 	mov.w	r0, #0
 8002596:	f04f 0100 	mov.w	r1, #0
 800259a:	0159      	lsls	r1, r3, #5
 800259c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025a0:	0150      	lsls	r0, r2, #5
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4621      	mov	r1, r4
 80025a8:	1a51      	subs	r1, r2, r1
 80025aa:	6139      	str	r1, [r7, #16]
 80025ac:	4629      	mov	r1, r5
 80025ae:	eb63 0301 	sbc.w	r3, r3, r1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	f04f 0300 	mov.w	r3, #0
 80025bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025c0:	4659      	mov	r1, fp
 80025c2:	018b      	lsls	r3, r1, #6
 80025c4:	4651      	mov	r1, sl
 80025c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025ca:	4651      	mov	r1, sl
 80025cc:	018a      	lsls	r2, r1, #6
 80025ce:	4651      	mov	r1, sl
 80025d0:	ebb2 0801 	subs.w	r8, r2, r1
 80025d4:	4659      	mov	r1, fp
 80025d6:	eb63 0901 	sbc.w	r9, r3, r1
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	f04f 0300 	mov.w	r3, #0
 80025e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ee:	4690      	mov	r8, r2
 80025f0:	4699      	mov	r9, r3
 80025f2:	4623      	mov	r3, r4
 80025f4:	eb18 0303 	adds.w	r3, r8, r3
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	462b      	mov	r3, r5
 80025fc:	eb49 0303 	adc.w	r3, r9, r3
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800260e:	4629      	mov	r1, r5
 8002610:	024b      	lsls	r3, r1, #9
 8002612:	4621      	mov	r1, r4
 8002614:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002618:	4621      	mov	r1, r4
 800261a:	024a      	lsls	r2, r1, #9
 800261c:	4610      	mov	r0, r2
 800261e:	4619      	mov	r1, r3
 8002620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002622:	2200      	movs	r2, #0
 8002624:	62bb      	str	r3, [r7, #40]	; 0x28
 8002626:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002628:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800262c:	f7fd fdde 	bl	80001ec <__aeabi_uldivmod>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4613      	mov	r3, r2
 8002636:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002638:	e058      	b.n	80026ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800263a:	4b38      	ldr	r3, [pc, #224]	; (800271c <HAL_RCC_GetSysClockFreq+0x200>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	099b      	lsrs	r3, r3, #6
 8002640:	2200      	movs	r2, #0
 8002642:	4618      	mov	r0, r3
 8002644:	4611      	mov	r1, r2
 8002646:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800264a:	623b      	str	r3, [r7, #32]
 800264c:	2300      	movs	r3, #0
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
 8002650:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002654:	4642      	mov	r2, r8
 8002656:	464b      	mov	r3, r9
 8002658:	f04f 0000 	mov.w	r0, #0
 800265c:	f04f 0100 	mov.w	r1, #0
 8002660:	0159      	lsls	r1, r3, #5
 8002662:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002666:	0150      	lsls	r0, r2, #5
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4641      	mov	r1, r8
 800266e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002672:	4649      	mov	r1, r9
 8002674:	eb63 0b01 	sbc.w	fp, r3, r1
 8002678:	f04f 0200 	mov.w	r2, #0
 800267c:	f04f 0300 	mov.w	r3, #0
 8002680:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002684:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002688:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800268c:	ebb2 040a 	subs.w	r4, r2, sl
 8002690:	eb63 050b 	sbc.w	r5, r3, fp
 8002694:	f04f 0200 	mov.w	r2, #0
 8002698:	f04f 0300 	mov.w	r3, #0
 800269c:	00eb      	lsls	r3, r5, #3
 800269e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026a2:	00e2      	lsls	r2, r4, #3
 80026a4:	4614      	mov	r4, r2
 80026a6:	461d      	mov	r5, r3
 80026a8:	4643      	mov	r3, r8
 80026aa:	18e3      	adds	r3, r4, r3
 80026ac:	603b      	str	r3, [r7, #0]
 80026ae:	464b      	mov	r3, r9
 80026b0:	eb45 0303 	adc.w	r3, r5, r3
 80026b4:	607b      	str	r3, [r7, #4]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026c2:	4629      	mov	r1, r5
 80026c4:	028b      	lsls	r3, r1, #10
 80026c6:	4621      	mov	r1, r4
 80026c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80026cc:	4621      	mov	r1, r4
 80026ce:	028a      	lsls	r2, r1, #10
 80026d0:	4610      	mov	r0, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d6:	2200      	movs	r2, #0
 80026d8:	61bb      	str	r3, [r7, #24]
 80026da:	61fa      	str	r2, [r7, #28]
 80026dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026e0:	f7fd fd84 	bl	80001ec <__aeabi_uldivmod>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4613      	mov	r3, r2
 80026ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ec:	4b0b      	ldr	r3, [pc, #44]	; (800271c <HAL_RCC_GetSysClockFreq+0x200>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	0c1b      	lsrs	r3, r3, #16
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	3301      	adds	r3, #1
 80026f8:	005b      	lsls	r3, r3, #1
 80026fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002706:	e002      	b.n	800270e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <HAL_RCC_GetSysClockFreq+0x204>)
 800270a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800270c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800270e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002710:	4618      	mov	r0, r3
 8002712:	3750      	adds	r7, #80	; 0x50
 8002714:	46bd      	mov	sp, r7
 8002716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	00f42400 	.word	0x00f42400
 8002724:	007a1200 	.word	0x007a1200

08002728 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800272c:	4b03      	ldr	r3, [pc, #12]	; (800273c <HAL_RCC_GetHCLKFreq+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000000 	.word	0x20000000

08002740 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002744:	f7ff fff0 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002748:	4602      	mov	r2, r0
 800274a:	4b05      	ldr	r3, [pc, #20]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x20>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	0a9b      	lsrs	r3, r3, #10
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	4903      	ldr	r1, [pc, #12]	; (8002764 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002756:	5ccb      	ldrb	r3, [r1, r3]
 8002758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800275c:	4618      	mov	r0, r3
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40023800 	.word	0x40023800
 8002764:	080033a0 	.word	0x080033a0

08002768 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800276c:	f7ff ffdc 	bl	8002728 <HAL_RCC_GetHCLKFreq>
 8002770:	4602      	mov	r2, r0
 8002772:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	0b5b      	lsrs	r3, r3, #13
 8002778:	f003 0307 	and.w	r3, r3, #7
 800277c:	4903      	ldr	r1, [pc, #12]	; (800278c <HAL_RCC_GetPCLK2Freq+0x24>)
 800277e:	5ccb      	ldrb	r3, [r1, r3]
 8002780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002784:	4618      	mov	r0, r3
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40023800 	.word	0x40023800
 800278c:	080033a0 	.word	0x080033a0

08002790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800279e:	2301      	movs	r3, #1
 80027a0:	e03f      	b.n	8002822 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7fe f99e 	bl	8000af8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2224      	movs	r2, #36	; 0x24
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80027d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f000 f829 	bl	800282c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80027e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2220      	movs	r2, #32
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2220      	movs	r2, #32
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
	...

0800282c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800282c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002830:	b0c0      	sub	sp, #256	; 0x100
 8002832:	af00      	add	r7, sp, #0
 8002834:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002848:	68d9      	ldr	r1, [r3, #12]
 800284a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	ea40 0301 	orr.w	r3, r0, r1
 8002854:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	431a      	orrs	r2, r3
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	431a      	orrs	r2, r3
 800286c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002884:	f021 010c 	bic.w	r1, r1, #12
 8002888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002892:	430b      	orrs	r3, r1
 8002894:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a6:	6999      	ldr	r1, [r3, #24]
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	ea40 0301 	orr.w	r3, r0, r1
 80028b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b8f      	ldr	r3, [pc, #572]	; (8002af8 <UART_SetConfig+0x2cc>)
 80028bc:	429a      	cmp	r2, r3
 80028be:	d005      	beq.n	80028cc <UART_SetConfig+0xa0>
 80028c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	4b8d      	ldr	r3, [pc, #564]	; (8002afc <UART_SetConfig+0x2d0>)
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d104      	bne.n	80028d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028cc:	f7ff ff4c 	bl	8002768 <HAL_RCC_GetPCLK2Freq>
 80028d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80028d4:	e003      	b.n	80028de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028d6:	f7ff ff33 	bl	8002740 <HAL_RCC_GetPCLK1Freq>
 80028da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028e8:	f040 810c 	bne.w	8002b04 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80028ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028f0:	2200      	movs	r2, #0
 80028f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80028f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80028fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80028fe:	4622      	mov	r2, r4
 8002900:	462b      	mov	r3, r5
 8002902:	1891      	adds	r1, r2, r2
 8002904:	65b9      	str	r1, [r7, #88]	; 0x58
 8002906:	415b      	adcs	r3, r3
 8002908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800290a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800290e:	4621      	mov	r1, r4
 8002910:	eb12 0801 	adds.w	r8, r2, r1
 8002914:	4629      	mov	r1, r5
 8002916:	eb43 0901 	adc.w	r9, r3, r1
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002926:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800292a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800292e:	4690      	mov	r8, r2
 8002930:	4699      	mov	r9, r3
 8002932:	4623      	mov	r3, r4
 8002934:	eb18 0303 	adds.w	r3, r8, r3
 8002938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800293c:	462b      	mov	r3, r5
 800293e:	eb49 0303 	adc.w	r3, r9, r3
 8002942:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002952:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002956:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800295a:	460b      	mov	r3, r1
 800295c:	18db      	adds	r3, r3, r3
 800295e:	653b      	str	r3, [r7, #80]	; 0x50
 8002960:	4613      	mov	r3, r2
 8002962:	eb42 0303 	adc.w	r3, r2, r3
 8002966:	657b      	str	r3, [r7, #84]	; 0x54
 8002968:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800296c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002970:	f7fd fc3c 	bl	80001ec <__aeabi_uldivmod>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4b61      	ldr	r3, [pc, #388]	; (8002b00 <UART_SetConfig+0x2d4>)
 800297a:	fba3 2302 	umull	r2, r3, r3, r2
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	011c      	lsls	r4, r3, #4
 8002982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002986:	2200      	movs	r2, #0
 8002988:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800298c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002990:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002994:	4642      	mov	r2, r8
 8002996:	464b      	mov	r3, r9
 8002998:	1891      	adds	r1, r2, r2
 800299a:	64b9      	str	r1, [r7, #72]	; 0x48
 800299c:	415b      	adcs	r3, r3
 800299e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029a4:	4641      	mov	r1, r8
 80029a6:	eb12 0a01 	adds.w	sl, r2, r1
 80029aa:	4649      	mov	r1, r9
 80029ac:	eb43 0b01 	adc.w	fp, r3, r1
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029c4:	4692      	mov	sl, r2
 80029c6:	469b      	mov	fp, r3
 80029c8:	4643      	mov	r3, r8
 80029ca:	eb1a 0303 	adds.w	r3, sl, r3
 80029ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029d2:	464b      	mov	r3, r9
 80029d4:	eb4b 0303 	adc.w	r3, fp, r3
 80029d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80029dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80029ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80029f0:	460b      	mov	r3, r1
 80029f2:	18db      	adds	r3, r3, r3
 80029f4:	643b      	str	r3, [r7, #64]	; 0x40
 80029f6:	4613      	mov	r3, r2
 80029f8:	eb42 0303 	adc.w	r3, r2, r3
 80029fc:	647b      	str	r3, [r7, #68]	; 0x44
 80029fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a06:	f7fd fbf1 	bl	80001ec <__aeabi_uldivmod>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	460b      	mov	r3, r1
 8002a0e:	4611      	mov	r1, r2
 8002a10:	4b3b      	ldr	r3, [pc, #236]	; (8002b00 <UART_SetConfig+0x2d4>)
 8002a12:	fba3 2301 	umull	r2, r3, r3, r1
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2264      	movs	r2, #100	; 0x64
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	1acb      	subs	r3, r1, r3
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a26:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <UART_SetConfig+0x2d4>)
 8002a28:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a34:	441c      	add	r4, r3
 8002a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a40:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a48:	4642      	mov	r2, r8
 8002a4a:	464b      	mov	r3, r9
 8002a4c:	1891      	adds	r1, r2, r2
 8002a4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a50:	415b      	adcs	r3, r3
 8002a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a58:	4641      	mov	r1, r8
 8002a5a:	1851      	adds	r1, r2, r1
 8002a5c:	6339      	str	r1, [r7, #48]	; 0x30
 8002a5e:	4649      	mov	r1, r9
 8002a60:	414b      	adcs	r3, r1
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002a70:	4659      	mov	r1, fp
 8002a72:	00cb      	lsls	r3, r1, #3
 8002a74:	4651      	mov	r1, sl
 8002a76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	00ca      	lsls	r2, r1, #3
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	4642      	mov	r2, r8
 8002a86:	189b      	adds	r3, r3, r2
 8002a88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002a8c:	464b      	mov	r3, r9
 8002a8e:	460a      	mov	r2, r1
 8002a90:	eb42 0303 	adc.w	r3, r2, r3
 8002a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002aa4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002aa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002aac:	460b      	mov	r3, r1
 8002aae:	18db      	adds	r3, r3, r3
 8002ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	eb42 0303 	adc.w	r3, r2, r3
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002abe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ac2:	f7fd fb93 	bl	80001ec <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4b0d      	ldr	r3, [pc, #52]	; (8002b00 <UART_SetConfig+0x2d4>)
 8002acc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ad0:	095b      	lsrs	r3, r3, #5
 8002ad2:	2164      	movs	r1, #100	; 0x64
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	3332      	adds	r3, #50	; 0x32
 8002ade:	4a08      	ldr	r2, [pc, #32]	; (8002b00 <UART_SetConfig+0x2d4>)
 8002ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae4:	095b      	lsrs	r3, r3, #5
 8002ae6:	f003 0207 	and.w	r2, r3, #7
 8002aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4422      	add	r2, r4
 8002af2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002af4:	e106      	b.n	8002d04 <UART_SetConfig+0x4d8>
 8002af6:	bf00      	nop
 8002af8:	40011000 	.word	0x40011000
 8002afc:	40011400 	.word	0x40011400
 8002b00:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b0e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b12:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b16:	4642      	mov	r2, r8
 8002b18:	464b      	mov	r3, r9
 8002b1a:	1891      	adds	r1, r2, r2
 8002b1c:	6239      	str	r1, [r7, #32]
 8002b1e:	415b      	adcs	r3, r3
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24
 8002b22:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b26:	4641      	mov	r1, r8
 8002b28:	1854      	adds	r4, r2, r1
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	eb43 0501 	adc.w	r5, r3, r1
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	00eb      	lsls	r3, r5, #3
 8002b3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b3e:	00e2      	lsls	r2, r4, #3
 8002b40:	4614      	mov	r4, r2
 8002b42:	461d      	mov	r5, r3
 8002b44:	4643      	mov	r3, r8
 8002b46:	18e3      	adds	r3, r4, r3
 8002b48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b4c:	464b      	mov	r3, r9
 8002b4e:	eb45 0303 	adc.w	r3, r5, r3
 8002b52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b62:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002b72:	4629      	mov	r1, r5
 8002b74:	008b      	lsls	r3, r1, #2
 8002b76:	4621      	mov	r1, r4
 8002b78:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	008a      	lsls	r2, r1, #2
 8002b80:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002b84:	f7fd fb32 	bl	80001ec <__aeabi_uldivmod>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4b60      	ldr	r3, [pc, #384]	; (8002d10 <UART_SetConfig+0x4e4>)
 8002b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	011c      	lsls	r4, r3, #4
 8002b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ba0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ba4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ba8:	4642      	mov	r2, r8
 8002baa:	464b      	mov	r3, r9
 8002bac:	1891      	adds	r1, r2, r2
 8002bae:	61b9      	str	r1, [r7, #24]
 8002bb0:	415b      	adcs	r3, r3
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bb8:	4641      	mov	r1, r8
 8002bba:	1851      	adds	r1, r2, r1
 8002bbc:	6139      	str	r1, [r7, #16]
 8002bbe:	4649      	mov	r1, r9
 8002bc0:	414b      	adcs	r3, r1
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f04f 0300 	mov.w	r3, #0
 8002bcc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd0:	4659      	mov	r1, fp
 8002bd2:	00cb      	lsls	r3, r1, #3
 8002bd4:	4651      	mov	r1, sl
 8002bd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bda:	4651      	mov	r1, sl
 8002bdc:	00ca      	lsls	r2, r1, #3
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	4642      	mov	r2, r8
 8002be6:	189b      	adds	r3, r3, r2
 8002be8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002bec:	464b      	mov	r3, r9
 8002bee:	460a      	mov	r2, r1
 8002bf0:	eb42 0303 	adc.w	r3, r2, r3
 8002bf4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c02:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c10:	4649      	mov	r1, r9
 8002c12:	008b      	lsls	r3, r1, #2
 8002c14:	4641      	mov	r1, r8
 8002c16:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c1a:	4641      	mov	r1, r8
 8002c1c:	008a      	lsls	r2, r1, #2
 8002c1e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c22:	f7fd fae3 	bl	80001ec <__aeabi_uldivmod>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	4611      	mov	r1, r2
 8002c2c:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <UART_SetConfig+0x4e4>)
 8002c2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c32:	095b      	lsrs	r3, r3, #5
 8002c34:	2264      	movs	r2, #100	; 0x64
 8002c36:	fb02 f303 	mul.w	r3, r2, r3
 8002c3a:	1acb      	subs	r3, r1, r3
 8002c3c:	011b      	lsls	r3, r3, #4
 8002c3e:	3332      	adds	r3, #50	; 0x32
 8002c40:	4a33      	ldr	r2, [pc, #204]	; (8002d10 <UART_SetConfig+0x4e4>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c4c:	441c      	add	r4, r3
 8002c4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c52:	2200      	movs	r2, #0
 8002c54:	673b      	str	r3, [r7, #112]	; 0x70
 8002c56:	677a      	str	r2, [r7, #116]	; 0x74
 8002c58:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c5c:	4642      	mov	r2, r8
 8002c5e:	464b      	mov	r3, r9
 8002c60:	1891      	adds	r1, r2, r2
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	415b      	adcs	r3, r3
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c6c:	4641      	mov	r1, r8
 8002c6e:	1851      	adds	r1, r2, r1
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	4649      	mov	r1, r9
 8002c74:	414b      	adcs	r3, r1
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	f04f 0200 	mov.w	r2, #0
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002c84:	4659      	mov	r1, fp
 8002c86:	00cb      	lsls	r3, r1, #3
 8002c88:	4651      	mov	r1, sl
 8002c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c8e:	4651      	mov	r1, sl
 8002c90:	00ca      	lsls	r2, r1, #3
 8002c92:	4610      	mov	r0, r2
 8002c94:	4619      	mov	r1, r3
 8002c96:	4603      	mov	r3, r0
 8002c98:	4642      	mov	r2, r8
 8002c9a:	189b      	adds	r3, r3, r2
 8002c9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002c9e:	464b      	mov	r3, r9
 8002ca0:	460a      	mov	r2, r1
 8002ca2:	eb42 0303 	adc.w	r3, r2, r3
 8002ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	663b      	str	r3, [r7, #96]	; 0x60
 8002cb2:	667a      	str	r2, [r7, #100]	; 0x64
 8002cb4:	f04f 0200 	mov.w	r2, #0
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cc0:	4649      	mov	r1, r9
 8002cc2:	008b      	lsls	r3, r1, #2
 8002cc4:	4641      	mov	r1, r8
 8002cc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cca:	4641      	mov	r1, r8
 8002ccc:	008a      	lsls	r2, r1, #2
 8002cce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002cd2:	f7fd fa8b 	bl	80001ec <__aeabi_uldivmod>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <UART_SetConfig+0x4e4>)
 8002cdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002ce0:	095b      	lsrs	r3, r3, #5
 8002ce2:	2164      	movs	r1, #100	; 0x64
 8002ce4:	fb01 f303 	mul.w	r3, r1, r3
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	3332      	adds	r3, #50	; 0x32
 8002cee:	4a08      	ldr	r2, [pc, #32]	; (8002d10 <UART_SetConfig+0x4e4>)
 8002cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf4:	095b      	lsrs	r3, r3, #5
 8002cf6:	f003 020f 	and.w	r2, r3, #15
 8002cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4422      	add	r2, r4
 8002d02:	609a      	str	r2, [r3, #8]
}
 8002d04:	bf00      	nop
 8002d06:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d10:	51eb851f 	.word	0x51eb851f

08002d14 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d14:	b084      	sub	sp, #16
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b084      	sub	sp, #16
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
 8002d1e:	f107 001c 	add.w	r0, r7, #28
 8002d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d122      	bne.n	8002d72 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002d40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d105      	bne.n	8002d66 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 faa2 	bl	80032b0 <USB_CoreReset>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e01a      	b.n	8002da8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 fa96 	bl	80032b0 <USB_CoreReset>
 8002d84:	4603      	mov	r3, r0
 8002d86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
 8002d9a:	e005      	b.n	8002da8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d10b      	bne.n	8002dc6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f043 0206 	orr.w	r2, r3, #6
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f043 0220 	orr.w	r2, r3, #32
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002dd2:	b004      	add	sp, #16
 8002dd4:	4770      	bx	lr

08002dd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f023 0201 	bic.w	r2, r3, #1
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002e04:	2300      	movs	r3, #0
 8002e06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002e14:	78fb      	ldrb	r3, [r7, #3]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d115      	bne.n	8002e46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e26:	2001      	movs	r0, #1
 8002e28:	f7fe f8d4 	bl	8000fd4 <HAL_Delay>
      ms++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa2e 	bl	8003294 <USB_GetMode>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d01e      	beq.n	8002e7c <USB_SetCurrentMode+0x84>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b31      	cmp	r3, #49	; 0x31
 8002e42:	d9f0      	bls.n	8002e26 <USB_SetCurrentMode+0x2e>
 8002e44:	e01a      	b.n	8002e7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d115      	bne.n	8002e78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002e58:	2001      	movs	r0, #1
 8002e5a:	f7fe f8bb 	bl	8000fd4 <HAL_Delay>
      ms++;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	3301      	adds	r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fa15 	bl	8003294 <USB_GetMode>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <USB_SetCurrentMode+0x84>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2b31      	cmp	r3, #49	; 0x31
 8002e74:	d9f0      	bls.n	8002e58 <USB_SetCurrentMode+0x60>
 8002e76:	e001      	b.n	8002e7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e005      	b.n	8002e88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2b32      	cmp	r3, #50	; 0x32
 8002e80:	d101      	bne.n	8002e86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e90:	b084      	sub	sp, #16
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
 8002e9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002e9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]
 8002eae:	e009      	b.n	8002ec4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	3340      	adds	r3, #64	; 0x40
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	4413      	add	r3, r2
 8002eba:	2200      	movs	r2, #0
 8002ebc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	2b0e      	cmp	r3, #14
 8002ec8:	d9f2      	bls.n	8002eb0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002eca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d11c      	bne.n	8002f0a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ede:	f043 0302 	orr.w	r3, r3, #2
 8002ee2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	639a      	str	r2, [r3, #56]	; 0x38
 8002f08:	e00b      	b.n	8002f22 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f34:	4619      	mov	r1, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	680b      	ldr	r3, [r1, #0]
 8002f40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10c      	bne.n	8002f62 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d104      	bne.n	8002f58 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002f4e:	2100      	movs	r1, #0
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f965 	bl	8003220 <USB_SetDevSpeed>
 8002f56:	e008      	b.n	8002f6a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002f58:	2101      	movs	r1, #1
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f960 	bl	8003220 <USB_SetDevSpeed>
 8002f60:	e003      	b.n	8002f6a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f62:	2103      	movs	r1, #3
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f95b 	bl	8003220 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f6a:	2110      	movs	r1, #16
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f8f3 	bl	8003158 <USB_FlushTxFifo>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f91f 	bl	80031c0 <USB_FlushRxFifo>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f92:	461a      	mov	r2, r3
 8002f94:	2300      	movs	r3, #0
 8002f96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002faa:	461a      	mov	r2, r3
 8002fac:	2300      	movs	r3, #0
 8002fae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	613b      	str	r3, [r7, #16]
 8002fb4:	e043      	b.n	800303e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002fcc:	d118      	bne.n	8003000 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	e013      	b.n	8003012 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e008      	b.n	8003012 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800300c:	461a      	mov	r2, r3
 800300e:	2300      	movs	r3, #0
 8003010:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4413      	add	r3, r2
 800301a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800301e:	461a      	mov	r2, r3
 8003020:	2300      	movs	r3, #0
 8003022:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	015a      	lsls	r2, r3, #5
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4413      	add	r3, r2
 800302c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003030:	461a      	mov	r2, r3
 8003032:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003036:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	3301      	adds	r3, #1
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	693a      	ldr	r2, [r7, #16]
 8003042:	429a      	cmp	r2, r3
 8003044:	d3b7      	bcc.n	8002fb6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003046:	2300      	movs	r3, #0
 8003048:	613b      	str	r3, [r7, #16]
 800304a:	e043      	b.n	80030d4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	015a      	lsls	r2, r3, #5
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4413      	add	r3, r2
 8003054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800305e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003062:	d118      	bne.n	8003096 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	015a      	lsls	r2, r3, #5
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4413      	add	r3, r2
 8003072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003076:	461a      	mov	r2, r3
 8003078:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	e013      	b.n	80030a8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308c:	461a      	mov	r2, r3
 800308e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	e008      	b.n	80030a8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	015a      	lsls	r2, r3, #5
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030a2:	461a      	mov	r2, r3
 80030a4:	2300      	movs	r3, #0
 80030a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b4:	461a      	mov	r2, r3
 80030b6:	2300      	movs	r3, #0
 80030b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030c6:	461a      	mov	r2, r3
 80030c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80030cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	3301      	adds	r3, #1
 80030d2:	613b      	str	r3, [r7, #16]
 80030d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d3b7      	bcc.n	800304c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e2:	691b      	ldr	r3, [r3, #16]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80030fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80030fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003100:	2b00      	cmp	r3, #0
 8003102:	d105      	bne.n	8003110 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	f043 0210 	orr.w	r2, r3, #16
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699a      	ldr	r2, [r3, #24]
 8003114:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <USB_DevInit+0x2c4>)
 8003116:	4313      	orrs	r3, r2
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800311c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311e:	2b00      	cmp	r3, #0
 8003120:	d005      	beq.n	800312e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	f043 0208 	orr.w	r2, r3, #8
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800312e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003130:	2b01      	cmp	r3, #1
 8003132:	d107      	bne.n	8003144 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800313c:	f043 0304 	orr.w	r3, r3, #4
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003144:	7dfb      	ldrb	r3, [r7, #23]
}
 8003146:	4618      	mov	r0, r3
 8003148:	3718      	adds	r7, #24
 800314a:	46bd      	mov	sp, r7
 800314c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003150:	b004      	add	sp, #16
 8003152:	4770      	bx	lr
 8003154:	803c3800 	.word	0x803c3800

08003158 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	3301      	adds	r3, #1
 800316a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	4a13      	ldr	r2, [pc, #76]	; (80031bc <USB_FlushTxFifo+0x64>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d901      	bls.n	8003178 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e01b      	b.n	80031b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	2b00      	cmp	r3, #0
 800317e:	daf2      	bge.n	8003166 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003180:	2300      	movs	r3, #0
 8003182:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	019b      	lsls	r3, r3, #6
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	3301      	adds	r3, #1
 8003194:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4a08      	ldr	r2, [pc, #32]	; (80031bc <USB_FlushTxFifo+0x64>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e006      	b.n	80031b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b20      	cmp	r3, #32
 80031ac:	d0f0      	beq.n	8003190 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	00030d40 	.word	0x00030d40

080031c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3301      	adds	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4a11      	ldr	r2, [pc, #68]	; (800321c <USB_FlushRxFifo+0x5c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e018      	b.n	8003210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	daf2      	bge.n	80031cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2210      	movs	r2, #16
 80031ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	3301      	adds	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	4a08      	ldr	r2, [pc, #32]	; (800321c <USB_FlushRxFifo+0x5c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e006      	b.n	8003210 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0310 	and.w	r3, r3, #16
 800320a:	2b10      	cmp	r3, #16
 800320c:	d0f0      	beq.n	80031f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3714      	adds	r7, #20
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr
 800321c:	00030d40 	.word	0x00030d40

08003220 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	68f9      	ldr	r1, [r7, #12]
 800323c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003240:	4313      	orrs	r3, r2
 8003242:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3714      	adds	r7, #20
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68fa      	ldr	r2, [r7, #12]
 8003268:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800326c:	f023 0303 	bic.w	r3, r3, #3
 8003270:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003280:	f043 0302 	orr.w	r3, r3, #2
 8003284:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr

08003294 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	695b      	ldr	r3, [r3, #20]
 80032a0:	f003 0301 	and.w	r3, r3, #1
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3301      	adds	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a13      	ldr	r2, [pc, #76]	; (8003314 <USB_CoreReset+0x64>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e01b      	b.n	8003306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	daf2      	bge.n	80032bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80032d6:	2300      	movs	r3, #0
 80032d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	3301      	adds	r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4a09      	ldr	r2, [pc, #36]	; (8003314 <USB_CoreReset+0x64>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d901      	bls.n	80032f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e006      	b.n	8003306 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b01      	cmp	r3, #1
 8003302:	d0f0      	beq.n	80032e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	00030d40 	.word	0x00030d40

08003318 <memset>:
 8003318:	4402      	add	r2, r0
 800331a:	4603      	mov	r3, r0
 800331c:	4293      	cmp	r3, r2
 800331e:	d100      	bne.n	8003322 <memset+0xa>
 8003320:	4770      	bx	lr
 8003322:	f803 1b01 	strb.w	r1, [r3], #1
 8003326:	e7f9      	b.n	800331c <memset+0x4>

08003328 <__libc_init_array>:
 8003328:	b570      	push	{r4, r5, r6, lr}
 800332a:	4d0d      	ldr	r5, [pc, #52]	; (8003360 <__libc_init_array+0x38>)
 800332c:	4c0d      	ldr	r4, [pc, #52]	; (8003364 <__libc_init_array+0x3c>)
 800332e:	1b64      	subs	r4, r4, r5
 8003330:	10a4      	asrs	r4, r4, #2
 8003332:	2600      	movs	r6, #0
 8003334:	42a6      	cmp	r6, r4
 8003336:	d109      	bne.n	800334c <__libc_init_array+0x24>
 8003338:	4d0b      	ldr	r5, [pc, #44]	; (8003368 <__libc_init_array+0x40>)
 800333a:	4c0c      	ldr	r4, [pc, #48]	; (800336c <__libc_init_array+0x44>)
 800333c:	f000 f818 	bl	8003370 <_init>
 8003340:	1b64      	subs	r4, r4, r5
 8003342:	10a4      	asrs	r4, r4, #2
 8003344:	2600      	movs	r6, #0
 8003346:	42a6      	cmp	r6, r4
 8003348:	d105      	bne.n	8003356 <__libc_init_array+0x2e>
 800334a:	bd70      	pop	{r4, r5, r6, pc}
 800334c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003350:	4798      	blx	r3
 8003352:	3601      	adds	r6, #1
 8003354:	e7ee      	b.n	8003334 <__libc_init_array+0xc>
 8003356:	f855 3b04 	ldr.w	r3, [r5], #4
 800335a:	4798      	blx	r3
 800335c:	3601      	adds	r6, #1
 800335e:	e7f2      	b.n	8003346 <__libc_init_array+0x1e>
 8003360:	080033b0 	.word	0x080033b0
 8003364:	080033b0 	.word	0x080033b0
 8003368:	080033b0 	.word	0x080033b0
 800336c:	080033b4 	.word	0x080033b4

08003370 <_init>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr

0800337c <_fini>:
 800337c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337e:	bf00      	nop
 8003380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003382:	bc08      	pop	{r3}
 8003384:	469e      	mov	lr, r3
 8003386:	4770      	bx	lr
