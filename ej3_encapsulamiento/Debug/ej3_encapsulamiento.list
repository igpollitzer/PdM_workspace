
ej3_encapsulamiento.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003074  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003220  08003220  00013220  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003248  08003248  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003250  08003250  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003250  08003250  00013250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003254  08003254  00013254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003258  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007ac  200007ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e083  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d10  00000000  00000000  0002e102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b40  00000000  00000000  0002fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000008af  00000000  00000000  00030958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000244f9  00000000  00000000  00031207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d2bf  00000000  00000000  00055700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dbbed  00000000  00000000  000629bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f4c  00000000  00000000  0013e5ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  001414f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003208 	.word	0x08003208

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08003208 	.word	0x08003208

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ee:	f000 fc63 	bl	8000db8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f861 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f96f 	bl	80007d8 <MX_GPIO_Init>
  MX_ETH_Init();
 80004fa:	f000 f8c7 	bl	800068c <MX_ETH_Init>
  MX_USART3_UART_Init();
 80004fe:	f000 f913 	bl	8000728 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000502:	f000 f93b 	bl	800077c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  // Tengo un arreglo de tiempos de patron, y otro de la cantidad de veces que se repiten
  tick_t tiempos[] = {1000, 200, 100};
 8000506:	4a29      	ldr	r2, [pc, #164]	; (80005ac <main+0xc4>)
 8000508:	f107 0310 	add.w	r3, r7, #16
 800050c:	ca07      	ldmia	r2, {r0, r1, r2}
 800050e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  uint8_t repeticiones[] = {5, 5, 5};
 8000512:	4a27      	ldr	r2, [pc, #156]	; (80005b0 <main+0xc8>)
 8000514:	f107 030c 	add.w	r3, r7, #12
 8000518:	6812      	ldr	r2, [r2, #0]
 800051a:	4611      	mov	r1, r2
 800051c:	8019      	strh	r1, [r3, #0]
 800051e:	3302      	adds	r3, #2
 8000520:	0c12      	lsrs	r2, r2, #16
 8000522:	701a      	strb	r2, [r3, #0]
  // Contador e indice, para saber cuantas veces repeti, y que tiempo estoy repitiendo
  uint8_t contador = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	77fb      	strb	r3, [r7, #31]
  uint8_t indice = 0;
 8000528:	2300      	movs	r3, #0
 800052a:	77bb      	strb	r3, [r7, #30]

  delay_t timer = {.startTime = 0,
 800052c:	2300      	movs	r3, #0
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	2300      	movs	r3, #0
 8000536:	723b      	strb	r3, [r7, #8]
                   .duration = 0,
                   .running = false};
  //Como tengo un duty cycle de 50%, hago un corrimiento del tiempo para que conmute cada medio tiempo
  delayInit(&timer,tiempos[indice]>>1);
 8000538:	7fbb      	ldrb	r3, [r7, #30]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	3320      	adds	r3, #32
 800053e:	443b      	add	r3, r7
 8000540:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000544:	085a      	lsrs	r2, r3, #1
 8000546:	463b      	mov	r3, r7
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f000 fbed 	bl	8000d2a <delayInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if (delayRead(&timer)){
 8000550:	463b      	mov	r3, r7
 8000552:	4618      	mov	r0, r3
 8000554:	f000 fbfa 	bl	8000d4c <delayRead>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d0f8      	beq.n	8000550 <main+0x68>
	        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800055e:	2180      	movs	r1, #128	; 0x80
 8000560:	4814      	ldr	r0, [pc, #80]	; (80005b4 <main+0xcc>)
 8000562:	f001 fa92 	bl	8001a8a <HAL_GPIO_TogglePin>
	        contador++;
 8000566:	7ffb      	ldrb	r3, [r7, #31]
 8000568:	3301      	adds	r3, #1
 800056a:	77fb      	strb	r3, [r7, #31]
	        // Cada indice repeticiones del toggle, corremos el indice y cambiamos la duracion.
	        // Para corregir la division del tiempo hago el corrimiento inverso, con las repeticiones
	        if (contador == repeticiones[indice]<<1){
 800056c:	7ffa      	ldrb	r2, [r7, #31]
 800056e:	7fbb      	ldrb	r3, [r7, #30]
 8000570:	3320      	adds	r3, #32
 8000572:	443b      	add	r3, r7
 8000574:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000578:	005b      	lsls	r3, r3, #1
 800057a:	429a      	cmp	r2, r3
 800057c:	d1e8      	bne.n	8000550 <main+0x68>
	        	contador = 0;
 800057e:	2300      	movs	r3, #0
 8000580:	77fb      	strb	r3, [r7, #31]
	        	indice++;
 8000582:	7fbb      	ldrb	r3, [r7, #30]
 8000584:	3301      	adds	r3, #1
 8000586:	77bb      	strb	r3, [r7, #30]
	        	// El largo del array de repeticiones es 3. Cuando haya pasado por los 3 valores, vuelve a empezar
	        	if (indice == 3){
 8000588:	7fbb      	ldrb	r3, [r7, #30]
 800058a:	2b03      	cmp	r3, #3
 800058c:	d101      	bne.n	8000592 <main+0xaa>
	        		indice = 0;
 800058e:	2300      	movs	r3, #0
 8000590:	77bb      	strb	r3, [r7, #30]
	        	}
	        	//Como tengo un duty cycle de 50%, hago un corrimiento del tiempo para que conmute cada medio tiempo
	        	delayWrite(&timer, tiempos[indice]>>1);
 8000592:	7fbb      	ldrb	r3, [r7, #30]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	3320      	adds	r3, #32
 8000598:	443b      	add	r3, r7
 800059a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800059e:	085a      	lsrs	r2, r3, #1
 80005a0:	463b      	mov	r3, r7
 80005a2:	4611      	mov	r1, r2
 80005a4:	4618      	mov	r0, r3
 80005a6:	f000 fbf9 	bl	8000d9c <delayWrite>
	    if (delayRead(&timer)){
 80005aa:	e7d1      	b.n	8000550 <main+0x68>
 80005ac:	08003220 	.word	0x08003220
 80005b0:	0800322c 	.word	0x0800322c
 80005b4:	40020400 	.word	0x40020400

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2230      	movs	r2, #48	; 0x30
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 fdf2 	bl	80031b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 030c 	add.w	r3, r7, #12
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005dc:	2300      	movs	r3, #0
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	4b28      	ldr	r3, [pc, #160]	; (8000684 <SystemClock_Config+0xcc>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	4a27      	ldr	r2, [pc, #156]	; (8000684 <SystemClock_Config+0xcc>)
 80005e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ea:	6413      	str	r3, [r2, #64]	; 0x40
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <SystemClock_Config+0xcc>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f4:	60bb      	str	r3, [r7, #8]
 80005f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b22      	ldr	r3, [pc, #136]	; (8000688 <SystemClock_Config+0xd0>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <SystemClock_Config+0xd0>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <SystemClock_Config+0xd0>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000614:	2301      	movs	r3, #1
 8000616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000618:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800061c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000622:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000626:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000628:	2304      	movs	r3, #4
 800062a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800062c:	23a8      	movs	r3, #168	; 0xa8
 800062e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000634:	2307      	movs	r3, #7
 8000636:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fb5b 	bl	8001cf8 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000648:	f000 f974 	bl	8000934 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2302      	movs	r3, #2
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000658:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800065c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2105      	movs	r1, #5
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fdbc 	bl	80021e8 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000676:	f000 f95d 	bl	8000934 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3750      	adds	r7, #80	; 0x50
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000690:	4b1f      	ldr	r3, [pc, #124]	; (8000710 <MX_ETH_Init+0x84>)
 8000692:	4a20      	ldr	r2, [pc, #128]	; (8000714 <MX_ETH_Init+0x88>)
 8000694:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000696:	4b20      	ldr	r3, [pc, #128]	; (8000718 <MX_ETH_Init+0x8c>)
 8000698:	2200      	movs	r2, #0
 800069a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800069c:	4b1e      	ldr	r3, [pc, #120]	; (8000718 <MX_ETH_Init+0x8c>)
 800069e:	2280      	movs	r2, #128	; 0x80
 80006a0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006a2:	4b1d      	ldr	r3, [pc, #116]	; (8000718 <MX_ETH_Init+0x8c>)
 80006a4:	22e1      	movs	r2, #225	; 0xe1
 80006a6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006a8:	4b1b      	ldr	r3, [pc, #108]	; (8000718 <MX_ETH_Init+0x8c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006ae:	4b1a      	ldr	r3, [pc, #104]	; (8000718 <MX_ETH_Init+0x8c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006b4:	4b18      	ldr	r3, [pc, #96]	; (8000718 <MX_ETH_Init+0x8c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <MX_ETH_Init+0x84>)
 80006bc:	4a16      	ldr	r2, [pc, #88]	; (8000718 <MX_ETH_Init+0x8c>)
 80006be:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006c0:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_ETH_Init+0x84>)
 80006c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80006c6:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_ETH_Init+0x84>)
 80006ca:	4a14      	ldr	r2, [pc, #80]	; (800071c <MX_ETH_Init+0x90>)
 80006cc:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <MX_ETH_Init+0x84>)
 80006d0:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_ETH_Init+0x94>)
 80006d2:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_ETH_Init+0x84>)
 80006d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80006da:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006dc:	480c      	ldr	r0, [pc, #48]	; (8000710 <MX_ETH_Init+0x84>)
 80006de:	f000 fce7 	bl	80010b0 <HAL_ETH_Init>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006e8:	f000 f924 	bl	8000934 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006ec:	2238      	movs	r2, #56	; 0x38
 80006ee:	2100      	movs	r1, #0
 80006f0:	480c      	ldr	r0, [pc, #48]	; (8000724 <MX_ETH_Init+0x98>)
 80006f2:	f002 fd5d 	bl	80031b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006f6:	4b0b      	ldr	r3, [pc, #44]	; (8000724 <MX_ETH_Init+0x98>)
 80006f8:	2221      	movs	r2, #33	; 0x21
 80006fa:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80006fc:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_ETH_Init+0x98>)
 80006fe:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000702:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_ETH_Init+0x98>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001a0 	.word	0x200001a0
 8000714:	40028000 	.word	0x40028000
 8000718:	200007a0 	.word	0x200007a0
 800071c:	20000100 	.word	0x20000100
 8000720:	20000060 	.word	0x20000060
 8000724:	20000028 	.word	0x20000028

08000728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800072e:	4a12      	ldr	r2, [pc, #72]	; (8000778 <MX_USART3_UART_Init+0x50>)
 8000730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000732:	4b10      	ldr	r3, [pc, #64]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073a:	4b0e      	ldr	r3, [pc, #56]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800073c:	2200      	movs	r2, #0
 800073e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000742:	2200      	movs	r2, #0
 8000744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000746:	4b0b      	ldr	r3, [pc, #44]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800074c:	4b09      	ldr	r3, [pc, #36]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800074e:	220c      	movs	r2, #12
 8000750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000752:	4b08      	ldr	r3, [pc, #32]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000758:	4b06      	ldr	r3, [pc, #24]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800075e:	4805      	ldr	r0, [pc, #20]	; (8000774 <MX_USART3_UART_Init+0x4c>)
 8000760:	f001 ff62 	bl	8002628 <HAL_UART_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800076a:	f000 f8e3 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	20000250 	.word	0x20000250
 8000778:	40004800 	.word	0x40004800

0800077c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000780:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000786:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078a:	2204      	movs	r2, #4
 800078c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000790:	2202      	movs	r2, #2
 8000792:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079c:	2202      	movs	r2, #2
 800079e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b4:	2201      	movs	r2, #1
 80007b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c0:	f001 f97d 	bl	8001abe <HAL_PCD_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ca:	f000 f8b3 	bl	8000934 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000294 	.word	0x20000294

080007d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08c      	sub	sp, #48	; 0x30
 80007dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
 80007f2:	4b4c      	ldr	r3, [pc, #304]	; (8000924 <MX_GPIO_Init+0x14c>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a4b      	ldr	r2, [pc, #300]	; (8000924 <MX_GPIO_Init+0x14c>)
 80007f8:	f043 0304 	orr.w	r3, r3, #4
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b49      	ldr	r3, [pc, #292]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0304 	and.w	r3, r3, #4
 8000806:	61bb      	str	r3, [r7, #24]
 8000808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	617b      	str	r3, [r7, #20]
 800080e:	4b45      	ldr	r3, [pc, #276]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a44      	ldr	r2, [pc, #272]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b42      	ldr	r3, [pc, #264]	; (8000924 <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	617b      	str	r3, [r7, #20]
 8000824:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b3e      	ldr	r3, [pc, #248]	; (8000924 <MX_GPIO_Init+0x14c>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a3d      	ldr	r2, [pc, #244]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000830:	f043 0301 	orr.w	r3, r3, #1
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b3b      	ldr	r3, [pc, #236]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0301 	and.w	r3, r3, #1
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b37      	ldr	r3, [pc, #220]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a36      	ldr	r2, [pc, #216]	; (8000924 <MX_GPIO_Init+0x14c>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b34      	ldr	r3, [pc, #208]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0302 	and.w	r3, r3, #2
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b30      	ldr	r3, [pc, #192]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a2f      	ldr	r2, [pc, #188]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000868:	f043 0308 	orr.w	r3, r3, #8
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b2d      	ldr	r3, [pc, #180]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0308 	and.w	r3, r3, #8
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b29      	ldr	r3, [pc, #164]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a28      	ldr	r2, [pc, #160]	; (8000924 <MX_GPIO_Init+0x14c>)
 8000884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b26      	ldr	r3, [pc, #152]	; (8000924 <MX_GPIO_Init+0x14c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	f244 0181 	movw	r1, #16513	; 0x4081
 800089c:	4822      	ldr	r0, [pc, #136]	; (8000928 <MX_GPIO_Init+0x150>)
 800089e:	f001 f8db 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a2:	2200      	movs	r2, #0
 80008a4:	2140      	movs	r1, #64	; 0x40
 80008a6:	4821      	ldr	r0, [pc, #132]	; (800092c <MX_GPIO_Init+0x154>)
 80008a8:	f001 f8d6 	bl	8001a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008bc:	f107 031c 	add.w	r3, r7, #28
 80008c0:	4619      	mov	r1, r3
 80008c2:	481b      	ldr	r0, [pc, #108]	; (8000930 <MX_GPIO_Init+0x158>)
 80008c4:	f000 ff1c 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008c8:	f244 0381 	movw	r3, #16513	; 0x4081
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_GPIO_Init+0x150>)
 80008e2:	f000 ff0d 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008e6:	2340      	movs	r3, #64	; 0x40
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 031c 	add.w	r3, r7, #28
 80008fa:	4619      	mov	r1, r3
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <MX_GPIO_Init+0x154>)
 80008fe:	f000 feff 	bl	8001700 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4805      	ldr	r0, [pc, #20]	; (800092c <MX_GPIO_Init+0x154>)
 8000916:	f000 fef3 	bl	8001700 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091a:	bf00      	nop
 800091c:	3730      	adds	r7, #48	; 0x30
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	40023800 	.word	0x40023800
 8000928:	40020400 	.word	0x40020400
 800092c:	40021800 	.word	0x40021800
 8000930:	40020800 	.word	0x40020800

08000934 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000938:	b672      	cpsid	i
}
 800093a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093c:	e7fe      	b.n	800093c <Error_Handler+0x8>
	...

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	607b      	str	r3, [r7, #4]
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <HAL_MspInit+0x4c>)
 800094c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800094e:	4a0f      	ldr	r2, [pc, #60]	; (800098c <HAL_MspInit+0x4c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6453      	str	r3, [r2, #68]	; 0x44
 8000956:	4b0d      	ldr	r3, [pc, #52]	; (800098c <HAL_MspInit+0x4c>)
 8000958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	603b      	str	r3, [r7, #0]
 8000966:	4b09      	ldr	r3, [pc, #36]	; (800098c <HAL_MspInit+0x4c>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096a:	4a08      	ldr	r2, [pc, #32]	; (800098c <HAL_MspInit+0x4c>)
 800096c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000970:	6413      	str	r3, [r2, #64]	; 0x40
 8000972:	4b06      	ldr	r3, [pc, #24]	; (800098c <HAL_MspInit+0x4c>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000976:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800097a:	603b      	str	r3, [r7, #0]
 800097c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800097e:	bf00      	nop
 8000980:	370c      	adds	r7, #12
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40023800 	.word	0x40023800

08000990 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08e      	sub	sp, #56	; 0x38
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a55      	ldr	r2, [pc, #340]	; (8000b04 <HAL_ETH_MspInit+0x174>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	f040 80a4 	bne.w	8000afc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009b4:	2300      	movs	r3, #0
 80009b6:	623b      	str	r3, [r7, #32]
 80009b8:	4b53      	ldr	r3, [pc, #332]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 80009ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009bc:	4a52      	ldr	r2, [pc, #328]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 80009be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009c2:	6313      	str	r3, [r2, #48]	; 0x30
 80009c4:	4b50      	ldr	r3, [pc, #320]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009cc:	623b      	str	r3, [r7, #32]
 80009ce:	6a3b      	ldr	r3, [r7, #32]
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
 80009d4:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 80009d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d8:	4a4b      	ldr	r2, [pc, #300]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 80009da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009de:	6313      	str	r3, [r2, #48]	; 0x30
 80009e0:	4b49      	ldr	r3, [pc, #292]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009e8:	61fb      	str	r3, [r7, #28]
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	4b45      	ldr	r3, [pc, #276]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a44      	ldr	r2, [pc, #272]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 80009f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b42      	ldr	r3, [pc, #264]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	617b      	str	r3, [r7, #20]
 8000a0c:	4b3e      	ldr	r3, [pc, #248]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a10:	4a3d      	ldr	r2, [pc, #244]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a12:	f043 0304 	orr.w	r3, r3, #4
 8000a16:	6313      	str	r3, [r2, #48]	; 0x30
 8000a18:	4b3b      	ldr	r3, [pc, #236]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	f003 0304 	and.w	r3, r3, #4
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	4b37      	ldr	r3, [pc, #220]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2c:	4a36      	ldr	r2, [pc, #216]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a2e:	f043 0301 	orr.w	r3, r3, #1
 8000a32:	6313      	str	r3, [r2, #48]	; 0x30
 8000a34:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	f003 0301 	and.w	r3, r3, #1
 8000a3c:	613b      	str	r3, [r7, #16]
 8000a3e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a40:	2300      	movs	r3, #0
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	4b30      	ldr	r3, [pc, #192]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a48:	4a2f      	ldr	r2, [pc, #188]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a50:	4b2d      	ldr	r3, [pc, #180]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a54:	f003 0302 	and.w	r3, r3, #2
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a64:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6c:	4b26      	ldr	r3, [pc, #152]	; (8000b08 <HAL_ETH_MspInit+0x178>)
 8000a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a78:	2332      	movs	r3, #50	; 0x32
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a88:	230b      	movs	r3, #11
 8000a8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a90:	4619      	mov	r1, r3
 8000a92:	481e      	ldr	r0, [pc, #120]	; (8000b0c <HAL_ETH_MspInit+0x17c>)
 8000a94:	f000 fe34 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a98:	2386      	movs	r3, #134	; 0x86
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa8:	230b      	movs	r3, #11
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4817      	ldr	r0, [pc, #92]	; (8000b10 <HAL_ETH_MspInit+0x180>)
 8000ab4:	f000 fe24 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aca:	230b      	movs	r3, #11
 8000acc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480f      	ldr	r0, [pc, #60]	; (8000b14 <HAL_ETH_MspInit+0x184>)
 8000ad6:	f000 fe13 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ada:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aec:	230b      	movs	r3, #11
 8000aee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af4:	4619      	mov	r1, r3
 8000af6:	4808      	ldr	r0, [pc, #32]	; (8000b18 <HAL_ETH_MspInit+0x188>)
 8000af8:	f000 fe02 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000afc:	bf00      	nop
 8000afe:	3738      	adds	r7, #56	; 0x38
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40028000 	.word	0x40028000
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	40020800 	.word	0x40020800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40021800 	.word	0x40021800

08000b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b08a      	sub	sp, #40	; 0x28
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a19      	ldr	r2, [pc, #100]	; (8000ba0 <HAL_UART_MspInit+0x84>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d12c      	bne.n	8000b98 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	4a17      	ldr	r2, [pc, #92]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b4e:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_UART_MspInit+0x88>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b88:	2307      	movs	r3, #7
 8000b8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <HAL_UART_MspInit+0x8c>)
 8000b94:	f000 fdb4 	bl	8001700 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b98:	bf00      	nop
 8000b9a:	3728      	adds	r7, #40	; 0x28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40004800 	.word	0x40004800
 8000ba4:	40023800 	.word	0x40023800
 8000ba8:	40020c00 	.word	0x40020c00

08000bac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000bcc:	d13f      	bne.n	8000c4e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b21      	ldr	r3, [pc, #132]	; (8000c58 <HAL_PCD_MspInit+0xac>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a20      	ldr	r2, [pc, #128]	; (8000c58 <HAL_PCD_MspInit+0xac>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b1e      	ldr	r3, [pc, #120]	; (8000c58 <HAL_PCD_MspInit+0xac>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bea:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4815      	ldr	r0, [pc, #84]	; (8000c5c <HAL_PCD_MspInit+0xb0>)
 8000c08:	f000 fd7a 	bl	8001700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480e      	ldr	r0, [pc, #56]	; (8000c5c <HAL_PCD_MspInit+0xb0>)
 8000c22:	f000 fd6d 	bl	8001700 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <HAL_PCD_MspInit+0xac>)
 8000c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2a:	4a0b      	ldr	r2, [pc, #44]	; (8000c58 <HAL_PCD_MspInit+0xac>)
 8000c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c30:	6353      	str	r3, [r2, #52]	; 0x34
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <HAL_PCD_MspInit+0xac>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_PCD_MspInit+0xac>)
 8000c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_PCD_MspInit+0xac>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4a:	60fb      	str	r3, [r7, #12]
 8000c4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000c4e:	bf00      	nop
 8000c50:	3728      	adds	r7, #40	; 0x28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40020000 	.word	0x40020000

08000c60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c64:	e7fe      	b.n	8000c64 <NMI_Handler+0x4>

08000c66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6a:	e7fe      	b.n	8000c6a <HardFault_Handler+0x4>

08000c6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <MemManage_Handler+0x4>

08000c72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c72:	b480      	push	{r7}
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c76:	e7fe      	b.n	8000c76 <BusFault_Handler+0x4>

08000c78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <UsageFault_Handler+0x4>

08000c7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c82:	bf00      	nop
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cac:	f000 f8d6 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <SystemInit+0x20>)
 8000cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cbe:	4a05      	ldr	r2, [pc, #20]	; (8000cd4 <SystemInit+0x20>)
 8000cc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cde:	490e      	ldr	r1, [pc, #56]	; (8000d18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce0:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce4:	e002      	b.n	8000cec <LoopCopyDataInit>

08000ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cea:	3304      	adds	r3, #4

08000cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf0:	d3f9      	bcc.n	8000ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf4:	4c0b      	ldr	r4, [pc, #44]	; (8000d24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf8:	e001      	b.n	8000cfe <LoopFillZerobss>

08000cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cfc:	3204      	adds	r2, #4

08000cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d00:	d3fb      	bcc.n	8000cfa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d02:	f7ff ffd7 	bl	8000cb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d06:	f002 fa5b 	bl	80031c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0a:	f7ff fbed 	bl	80004e8 <main>
  bx  lr    
 8000d0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d10:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d1c:	08003258 	.word	0x08003258
  ldr r2, =_sbss
 8000d20:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d24:	200007ac 	.word	0x200007ac

08000d28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d28:	e7fe      	b.n	8000d28 <ADC_IRQHandler>

08000d2a <delayInit>:
 */

#include "API_delay.h"
#include "stm32f4xx_hal.h"

void delayInit( delay_t * delay, tick_t duration ){
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	6039      	str	r1, [r7, #0]
    delay->duration = duration;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	683a      	ldr	r2, [r7, #0]
 8000d38:	605a      	str	r2, [r3, #4]
    delay->running = false;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	721a      	strb	r2, [r3, #8]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <delayRead>:

bool_t delayRead( delay_t * delay ){
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
	if (delay->running == false){
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7a1b      	ldrb	r3, [r3, #8]
 8000d58:	f083 0301 	eor.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d008      	beq.n	8000d74 <delayRead+0x28>
		delay->startTime = HAL_GetTick();
 8000d62:	f000 f88f 	bl	8000e84 <HAL_GetTick>
 8000d66:	4602      	mov	r2, r0
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2201      	movs	r2, #1
 8000d70:	721a      	strb	r2, [r3, #8]
 8000d72:	e00e      	b.n	8000d92 <delayRead+0x46>
	}else{
		// Calculo si paso el tiempo del delay
		if (HAL_GetTick() - delay->startTime > delay->duration){
 8000d74:	f000 f886 	bl	8000e84 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1ad2      	subs	r2, r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d904      	bls.n	8000d92 <delayRead+0x46>
			delay->running = false;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	721a      	strb	r2, [r3, #8]
			return true;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e000      	b.n	8000d94 <delayRead+0x48>
		}
	}
	return false;
 8000d92:	2300      	movs	r3, #0
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <delayWrite>:
void delayWrite( delay_t * delay, tick_t duration ){
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
	delay->duration = duration;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	605a      	str	r2, [r3, #4]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dbc:	4b0e      	ldr	r3, [pc, #56]	; (8000df8 <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	; (8000df8 <HAL_Init+0x40>)
 8000dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dc8:	4b0b      	ldr	r3, [pc, #44]	; (8000df8 <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <HAL_Init+0x40>)
 8000dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dd4:	4b08      	ldr	r3, [pc, #32]	; (8000df8 <HAL_Init+0x40>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a07      	ldr	r2, [pc, #28]	; (8000df8 <HAL_Init+0x40>)
 8000dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de0:	2003      	movs	r0, #3
 8000de2:	f000 f931 	bl	8001048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 f808 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000dec:	f7ff fda8 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023c00 	.word	0x40023c00

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f93b 	bl	8001096 <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f911 	bl	800105e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000000 	.word	0x20000000
 8000e54:	20000008 	.word	0x20000008
 8000e58:	20000004 	.word	0x20000004

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	200007a8 	.word	0x200007a8

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	200007a8 	.word	0x200007a8

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_Delay+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000008 	.word	0x20000008

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f16:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	60d3      	str	r3, [r2, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr
 8000f28:	e000ed00 	.word	0xe000ed00

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	3b01      	subs	r3, #1
 8001010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001014:	d301      	bcc.n	800101a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001016:	2301      	movs	r3, #1
 8001018:	e00f      	b.n	800103a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <SysTick_Config+0x40>)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3b01      	subs	r3, #1
 8001020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001022:	210f      	movs	r1, #15
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f7ff ff8e 	bl	8000f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <SysTick_Config+0x40>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SysTick_Config+0x40>)
 8001034:	2207      	movs	r2, #7
 8001036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	e000e010 	.word	0xe000e010

08001048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001050:	6878      	ldr	r0, [r7, #4]
 8001052:	f7ff ff47 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001056:	bf00      	nop
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}

0800105e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800105e:	b580      	push	{r7, lr}
 8001060:	b086      	sub	sp, #24
 8001062:	af00      	add	r7, sp, #0
 8001064:	4603      	mov	r3, r0
 8001066:	60b9      	str	r1, [r7, #8]
 8001068:	607a      	str	r2, [r7, #4]
 800106a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001070:	f7ff ff5c 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 8001074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	68b9      	ldr	r1, [r7, #8]
 800107a:	6978      	ldr	r0, [r7, #20]
 800107c:	f7ff ff8e 	bl	8000f9c <NVIC_EncodePriority>
 8001080:	4602      	mov	r2, r0
 8001082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001086:	4611      	mov	r1, r2
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff5d 	bl	8000f48 <__NVIC_SetPriority>
}
 800108e:	bf00      	nop
 8001090:	3718      	adds	r7, #24
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffb0 	bl	8001004 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e06c      	b.n	800119c <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d106      	bne.n	80010da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2223      	movs	r2, #35	; 0x23
 80010d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff fc5b 	bl	8000990 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <HAL_ETH_Init+0xf4>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	4a30      	ldr	r2, [pc, #192]	; (80011a4 <HAL_ETH_Init+0xf4>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ea:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <HAL_ETH_Init+0xf4>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010f6:	4b2c      	ldr	r3, [pc, #176]	; (80011a8 <HAL_ETH_Init+0xf8>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4a2b      	ldr	r2, [pc, #172]	; (80011a8 <HAL_ETH_Init+0xf8>)
 80010fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001100:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001102:	4b29      	ldr	r3, [pc, #164]	; (80011a8 <HAL_ETH_Init+0xf8>)
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	4927      	ldr	r1, [pc, #156]	; (80011a8 <HAL_ETH_Init+0xf8>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <HAL_ETH_Init+0xf8>)
 8001112:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800112a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800112c:	f7ff feaa 	bl	8000e84 <HAL_GetTick>
 8001130:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001132:	e011      	b.n	8001158 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001134:	f7ff fea6 	bl	8000e84 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001142:	d909      	bls.n	8001158 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2204      	movs	r2, #4
 8001148:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	22e0      	movs	r2, #224	; 0xe0
 8001150:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e021      	b.n	800119c <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1e4      	bne.n	8001134 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f958 	bl	8001420 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f9ff 	bl	8001574 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fa55 	bl	8001626 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	461a      	mov	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f9bd 	bl	8001504 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2210      	movs	r2, #16
 8001196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40013800 	.word	0x40013800

080011ac <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	4b51      	ldr	r3, [pc, #324]	; (8001308 <ETH_SetMACConfig+0x15c>)
 80011c2:	4013      	ands	r3, r2
 80011c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	7c1b      	ldrb	r3, [r3, #16]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d102      	bne.n	80011d4 <ETH_SetMACConfig+0x28>
 80011ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011d2:	e000      	b.n	80011d6 <ETH_SetMACConfig+0x2a>
 80011d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	7c5b      	ldrb	r3, [r3, #17]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d102      	bne.n	80011e4 <ETH_SetMACConfig+0x38>
 80011de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011e2:	e000      	b.n	80011e6 <ETH_SetMACConfig+0x3a>
 80011e4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80011e6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80011ec:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	7fdb      	ldrb	r3, [r3, #31]
 80011f2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80011f4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80011fa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	7f92      	ldrb	r2, [r2, #30]
 8001200:	2a00      	cmp	r2, #0
 8001202:	d102      	bne.n	800120a <ETH_SetMACConfig+0x5e>
 8001204:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001208:	e000      	b.n	800120c <ETH_SetMACConfig+0x60>
 800120a:	2200      	movs	r2, #0
                        macconf->Speed |
 800120c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	7f1b      	ldrb	r3, [r3, #28]
 8001212:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001214:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800121a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	791b      	ldrb	r3, [r3, #4]
 8001220:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001222:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	f892 2020 	ldrb.w	r2, [r2, #32]
 800122a:	2a00      	cmp	r2, #0
 800122c:	d102      	bne.n	8001234 <ETH_SetMACConfig+0x88>
 800122e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001232:	e000      	b.n	8001236 <ETH_SetMACConfig+0x8a>
 8001234:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001236:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	7bdb      	ldrb	r3, [r3, #15]
 800123c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800123e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001244:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800124c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800124e:	4313      	orrs	r3, r2
 8001250:	68fa      	ldr	r2, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001266:	2001      	movs	r0, #1
 8001268:	f7ff fe18 	bl	8000e9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800127c:	68fa      	ldr	r2, [r7, #12]
 800127e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001282:	4013      	ands	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800128a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800128c:	683a      	ldr	r2, [r7, #0]
 800128e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001292:	2a00      	cmp	r2, #0
 8001294:	d101      	bne.n	800129a <ETH_SetMACConfig+0xee>
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	e000      	b.n	800129c <ETH_SetMACConfig+0xf0>
 800129a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800129c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80012a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80012a4:	683a      	ldr	r2, [r7, #0]
 80012a6:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80012aa:	2a01      	cmp	r2, #1
 80012ac:	d101      	bne.n	80012b2 <ETH_SetMACConfig+0x106>
 80012ae:	2208      	movs	r2, #8
 80012b0:	e000      	b.n	80012b4 <ETH_SetMACConfig+0x108>
 80012b2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80012b4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80012bc:	2a01      	cmp	r2, #1
 80012be:	d101      	bne.n	80012c4 <ETH_SetMACConfig+0x118>
 80012c0:	2204      	movs	r2, #4
 80012c2:	e000      	b.n	80012c6 <ETH_SetMACConfig+0x11a>
 80012c4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80012c6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80012ce:	2a01      	cmp	r2, #1
 80012d0:	d101      	bne.n	80012d6 <ETH_SetMACConfig+0x12a>
 80012d2:	2202      	movs	r2, #2
 80012d4:	e000      	b.n	80012d8 <ETH_SetMACConfig+0x12c>
 80012d6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012d8:	4313      	orrs	r3, r2
 80012da:	68fa      	ldr	r2, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	699b      	ldr	r3, [r3, #24]
 80012ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff fdd3 	bl	8000e9c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	ff20810f 	.word	0xff20810f

0800130c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800131e:	699b      	ldr	r3, [r3, #24]
 8001320:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001322:	68fa      	ldr	r2, [r7, #12]
 8001324:	4b3d      	ldr	r3, [pc, #244]	; (800141c <ETH_SetDMAConfig+0x110>)
 8001326:	4013      	ands	r3, r2
 8001328:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	7b1b      	ldrb	r3, [r3, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d102      	bne.n	8001338 <ETH_SetDMAConfig+0x2c>
 8001332:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001336:	e000      	b.n	800133a <ETH_SetDMAConfig+0x2e>
 8001338:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	7b5b      	ldrb	r3, [r3, #13]
 800133e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001340:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	7f52      	ldrb	r2, [r2, #29]
 8001346:	2a00      	cmp	r2, #0
 8001348:	d102      	bne.n	8001350 <ETH_SetDMAConfig+0x44>
 800134a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800134e:	e000      	b.n	8001352 <ETH_SetDMAConfig+0x46>
 8001350:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001352:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	7b9b      	ldrb	r3, [r3, #14]
 8001358:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800135a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001360:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	7f1b      	ldrb	r3, [r3, #28]
 8001366:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001368:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	7f9b      	ldrb	r3, [r3, #30]
 800136e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001370:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001376:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800137e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001380:	4313      	orrs	r3, r2
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001390:	461a      	mov	r2, r3
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800139e:	699b      	ldr	r3, [r3, #24]
 80013a0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff fd7a 	bl	8000e9c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b0:	461a      	mov	r2, r3
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	791b      	ldrb	r3, [r3, #4]
 80013ba:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013c0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80013c6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80013cc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013d4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80013d6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013dc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80013de:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80013e4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013e6:	687a      	ldr	r2, [r7, #4]
 80013e8:	6812      	ldr	r2, [r2, #0]
 80013ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013f2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff fd4b 	bl	8000e9c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140e:	461a      	mov	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	f8de3f23 	.word	0xf8de3f23

08001420 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b0a6      	sub	sp, #152	; 0x98
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001428:	2301      	movs	r3, #1
 800142a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800142e:	2301      	movs	r3, #1
 8001430:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001434:	2300      	movs	r3, #0
 8001436:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800143e:	2301      	movs	r3, #1
 8001440:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800144a:	2301      	movs	r3, #1
 800144c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800145c:	2300      	movs	r3, #0
 800145e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001466:	2300      	movs	r3, #0
 8001468:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001482:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001486:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800148c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001494:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001498:	4619      	mov	r1, r3
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fe86 	bl	80011ac <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80014a0:	2301      	movs	r3, #1
 80014a2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80014a4:	2301      	movs	r3, #1
 80014a6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80014a8:	2301      	movs	r3, #1
 80014aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80014ae:	2301      	movs	r3, #1
 80014b0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80014c2:	2300      	movs	r3, #0
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80014c6:	2301      	movs	r3, #1
 80014c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80014cc:	2301      	movs	r3, #1
 80014ce:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80014d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014d4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80014d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80014dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014e0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80014e2:	2301      	movs	r3, #1
 80014e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80014ec:	2300      	movs	r3, #0
 80014ee:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80014f0:	f107 0308 	add.w	r3, r7, #8
 80014f4:	4619      	mov	r1, r3
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ff08 	bl	800130c <ETH_SetDMAConfig>
}
 80014fc:	bf00      	nop
 80014fe:	3798      	adds	r7, #152	; 0x98
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001504:	b480      	push	{r7}
 8001506:	b087      	sub	sp, #28
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	3305      	adds	r3, #5
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	021b      	lsls	r3, r3, #8
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	3204      	adds	r2, #4
 800151c:	7812      	ldrb	r2, [r2, #0]
 800151e:	4313      	orrs	r3, r2
 8001520:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <ETH_MACAddressConfig+0x68>)
 8001526:	4413      	add	r3, r2
 8001528:	461a      	mov	r2, r3
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	3303      	adds	r3, #3
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	061a      	lsls	r2, r3, #24
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	3302      	adds	r3, #2
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	041b      	lsls	r3, r3, #16
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3301      	adds	r3, #1
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	4313      	orrs	r3, r2
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	7812      	ldrb	r2, [r2, #0]
 800154e:	4313      	orrs	r3, r2
 8001550:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <ETH_MACAddressConfig+0x6c>)
 8001556:	4413      	add	r3, r2
 8001558:	461a      	mov	r2, r3
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	6013      	str	r3, [r2, #0]
}
 800155e:	bf00      	nop
 8001560:	371c      	adds	r7, #28
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40028040 	.word	0x40028040
 8001570:	40028044 	.word	0x40028044

08001574 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e03e      	b.n	8001600 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	68d9      	ldr	r1, [r3, #12]
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4613      	mov	r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800159a:	68bb      	ldr	r3, [r7, #8]
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	2200      	movs	r2, #0
 80015aa:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80015ac:	68b9      	ldr	r1, [r7, #8]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68fa      	ldr	r2, [r7, #12]
 80015b2:	3206      	adds	r2, #6
 80015b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d80c      	bhi.n	80015e4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68d9      	ldr	r1, [r3, #12]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	1c5a      	adds	r2, r3, #1
 80015d2:	4613      	mov	r3, r2
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	4413      	add	r3, r2
 80015d8:	00db      	lsls	r3, r3, #3
 80015da:	440b      	add	r3, r1
 80015dc:	461a      	mov	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	e004      	b.n	80015ee <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	461a      	mov	r2, r3
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d9bd      	bls.n	8001582 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001618:	611a      	str	r2, [r3, #16]
}
 800161a:	bf00      	nop
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001626:	b480      	push	{r7}
 8001628:	b085      	sub	sp, #20
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	e046      	b.n	80016c2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6919      	ldr	r1, [r3, #16]
 8001638:	68fa      	ldr	r2, [r7, #12]
 800163a:	4613      	mov	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2200      	movs	r2, #0
 8001650:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2200      	movs	r2, #0
 8001656:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	2200      	movs	r2, #0
 800165c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	2200      	movs	r2, #0
 8001662:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	2200      	movs	r2, #0
 8001668:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001670:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001678:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800167a:	68bb      	ldr	r3, [r7, #8]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001686:	68b9      	ldr	r1, [r7, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	3212      	adds	r2, #18
 800168e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d80c      	bhi.n	80016b2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6919      	ldr	r1, [r3, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	4613      	mov	r3, r2
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	440b      	add	r3, r1
 80016aa:	461a      	mov	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	60da      	str	r2, [r3, #12]
 80016b0:	e004      	b.n	80016bc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	461a      	mov	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	3301      	adds	r3, #1
 80016c0:	60fb      	str	r3, [r7, #12]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2b03      	cmp	r3, #3
 80016c6:	d9b5      	bls.n	8001634 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2200      	movs	r2, #0
 80016d2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691a      	ldr	r2, [r3, #16]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f2:	60da      	str	r2, [r3, #12]
}
 80016f4:	bf00      	nop
 80016f6:	3714      	adds	r7, #20
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001700:	b480      	push	{r7}
 8001702:	b089      	sub	sp, #36	; 0x24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
 800171a:	e177      	b.n	8001a0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800171c:	2201      	movs	r2, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	697a      	ldr	r2, [r7, #20]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	429a      	cmp	r2, r3
 8001736:	f040 8166 	bne.w	8001a06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
 8001742:	2b01      	cmp	r3, #1
 8001744:	d005      	beq.n	8001752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800174e:	2b02      	cmp	r3, #2
 8001750:	d130      	bne.n	80017b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001788:	2201      	movs	r2, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	43db      	mvns	r3, r3
 8001792:	69ba      	ldr	r2, [r7, #24]
 8001794:	4013      	ands	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	091b      	lsrs	r3, r3, #4
 800179e:	f003 0201 	and.w	r2, r3, #1
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b03      	cmp	r3, #3
 80017be:	d017      	beq.n	80017f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 0303 	and.w	r3, r3, #3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d123      	bne.n	8001844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	08da      	lsrs	r2, r3, #3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3208      	adds	r2, #8
 8001804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f003 0307 	and.w	r3, r3, #7
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	220f      	movs	r2, #15
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	08da      	lsrs	r2, r3, #3
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3208      	adds	r2, #8
 800183e:	69b9      	ldr	r1, [r7, #24]
 8001840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	005b      	lsls	r3, r3, #1
 800184e:	2203      	movs	r2, #3
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	43db      	mvns	r3, r3
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4013      	ands	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0203 	and.w	r2, r3, #3
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001880:	2b00      	cmp	r3, #0
 8001882:	f000 80c0 	beq.w	8001a06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001886:	2300      	movs	r3, #0
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	4b66      	ldr	r3, [pc, #408]	; (8001a24 <HAL_GPIO_Init+0x324>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188e:	4a65      	ldr	r2, [pc, #404]	; (8001a24 <HAL_GPIO_Init+0x324>)
 8001890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001894:	6453      	str	r3, [r2, #68]	; 0x44
 8001896:	4b63      	ldr	r3, [pc, #396]	; (8001a24 <HAL_GPIO_Init+0x324>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a2:	4a61      	ldr	r2, [pc, #388]	; (8001a28 <HAL_GPIO_Init+0x328>)
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	089b      	lsrs	r3, r3, #2
 80018a8:	3302      	adds	r3, #2
 80018aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	220f      	movs	r2, #15
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	4013      	ands	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a58      	ldr	r2, [pc, #352]	; (8001a2c <HAL_GPIO_Init+0x32c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d037      	beq.n	800193e <HAL_GPIO_Init+0x23e>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a57      	ldr	r2, [pc, #348]	; (8001a30 <HAL_GPIO_Init+0x330>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d031      	beq.n	800193a <HAL_GPIO_Init+0x23a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a56      	ldr	r2, [pc, #344]	; (8001a34 <HAL_GPIO_Init+0x334>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d02b      	beq.n	8001936 <HAL_GPIO_Init+0x236>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a55      	ldr	r2, [pc, #340]	; (8001a38 <HAL_GPIO_Init+0x338>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d025      	beq.n	8001932 <HAL_GPIO_Init+0x232>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a54      	ldr	r2, [pc, #336]	; (8001a3c <HAL_GPIO_Init+0x33c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d01f      	beq.n	800192e <HAL_GPIO_Init+0x22e>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a53      	ldr	r2, [pc, #332]	; (8001a40 <HAL_GPIO_Init+0x340>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d019      	beq.n	800192a <HAL_GPIO_Init+0x22a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a52      	ldr	r2, [pc, #328]	; (8001a44 <HAL_GPIO_Init+0x344>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d013      	beq.n	8001926 <HAL_GPIO_Init+0x226>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a51      	ldr	r2, [pc, #324]	; (8001a48 <HAL_GPIO_Init+0x348>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d00d      	beq.n	8001922 <HAL_GPIO_Init+0x222>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a50      	ldr	r2, [pc, #320]	; (8001a4c <HAL_GPIO_Init+0x34c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x21e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a4f      	ldr	r2, [pc, #316]	; (8001a50 <HAL_GPIO_Init+0x350>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_GPIO_Init+0x21a>
 8001916:	2309      	movs	r3, #9
 8001918:	e012      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800191a:	230a      	movs	r3, #10
 800191c:	e010      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800191e:	2308      	movs	r3, #8
 8001920:	e00e      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001922:	2307      	movs	r3, #7
 8001924:	e00c      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001926:	2306      	movs	r3, #6
 8001928:	e00a      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800192a:	2305      	movs	r3, #5
 800192c:	e008      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800192e:	2304      	movs	r3, #4
 8001930:	e006      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001932:	2303      	movs	r3, #3
 8001934:	e004      	b.n	8001940 <HAL_GPIO_Init+0x240>
 8001936:	2302      	movs	r3, #2
 8001938:	e002      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_GPIO_Init+0x240>
 800193e:	2300      	movs	r3, #0
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	f002 0203 	and.w	r2, r2, #3
 8001946:	0092      	lsls	r2, r2, #2
 8001948:	4093      	lsls	r3, r2
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001950:	4935      	ldr	r1, [pc, #212]	; (8001a28 <HAL_GPIO_Init+0x328>)
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	3302      	adds	r3, #2
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800195e:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <HAL_GPIO_Init+0x354>)
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d003      	beq.n	8001982 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001982:	4a34      	ldr	r2, [pc, #208]	; (8001a54 <HAL_GPIO_Init+0x354>)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001988:	4b32      	ldr	r3, [pc, #200]	; (8001a54 <HAL_GPIO_Init+0x354>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d003      	beq.n	80019ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019ac:	4a29      	ldr	r2, [pc, #164]	; (8001a54 <HAL_GPIO_Init+0x354>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019b2:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <HAL_GPIO_Init+0x354>)
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019d6:	4a1f      	ldr	r2, [pc, #124]	; (8001a54 <HAL_GPIO_Init+0x354>)
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	; (8001a54 <HAL_GPIO_Init+0x354>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a00:	4a14      	ldr	r2, [pc, #80]	; (8001a54 <HAL_GPIO_Init+0x354>)
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	2b0f      	cmp	r3, #15
 8001a10:	f67f ae84 	bls.w	800171c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	bf00      	nop
 8001a18:	3724      	adds	r7, #36	; 0x24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40021400 	.word	0x40021400
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40021c00 	.word	0x40021c00
 8001a4c:	40022000 	.word	0x40022000
 8001a50:	40022400 	.word	0x40022400
 8001a54:	40013c00 	.word	0x40013c00

08001a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	807b      	strh	r3, [r7, #2]
 8001a64:	4613      	mov	r3, r2
 8001a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a68:	787b      	ldrb	r3, [r7, #1]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a6e:	887a      	ldrh	r2, [r7, #2]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a74:	e003      	b.n	8001a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	041a      	lsls	r2, r3, #16
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	619a      	str	r2, [r3, #24]
}
 8001a7e:	bf00      	nop
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
 8001a92:	460b      	mov	r3, r1
 8001a94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	041a      	lsls	r2, r3, #16
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	43d9      	mvns	r1, r3
 8001aa8:	887b      	ldrh	r3, [r7, #2]
 8001aaa:	400b      	ands	r3, r1
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	619a      	str	r2, [r3, #24]
}
 8001ab2:	bf00      	nop
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ac0:	b08f      	sub	sp, #60	; 0x3c
 8001ac2:	af0a      	add	r7, sp, #40	; 0x28
 8001ac4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e10f      	b.n	8001cf0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff f85e 	bl	8000bac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2203      	movs	r2, #3
 8001af4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d102      	bne.n	8001b0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f001 f8ad 	bl	8002c6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	687e      	ldr	r6, [r7, #4]
 8001b1c:	466d      	mov	r5, sp
 8001b1e:	f106 0410 	add.w	r4, r6, #16
 8001b22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b32:	1d33      	adds	r3, r6, #4
 8001b34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b36:	6838      	ldr	r0, [r7, #0]
 8001b38:	f001 f838 	bl	8002bac <USB_CoreInit>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d005      	beq.n	8001b4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2202      	movs	r2, #2
 8001b46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0d0      	b.n	8001cf0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 f89b 	bl	8002c90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e04a      	b.n	8001bf6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b60:	7bfa      	ldrb	r2, [r7, #15]
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4613      	mov	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	4413      	add	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	333d      	adds	r3, #61	; 0x3d
 8001b70:	2201      	movs	r2, #1
 8001b72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b74:	7bfa      	ldrb	r2, [r7, #15]
 8001b76:	6879      	ldr	r1, [r7, #4]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	333c      	adds	r3, #60	; 0x3c
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	b298      	uxth	r0, r3
 8001b8e:	6879      	ldr	r1, [r7, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	440b      	add	r3, r1
 8001b9a:	3344      	adds	r3, #68	; 0x44
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001ba0:	7bfa      	ldrb	r2, [r7, #15]
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	440b      	add	r3, r1
 8001bae:	3340      	adds	r3, #64	; 0x40
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	3348      	adds	r3, #72	; 0x48
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	334c      	adds	r3, #76	; 0x4c
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	3354      	adds	r3, #84	; 0x54
 8001bec:	2200      	movs	r2, #0
 8001bee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bf0:	7bfb      	ldrb	r3, [r7, #15]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	73fb      	strb	r3, [r7, #15]
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d3af      	bcc.n	8001b60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c00:	2300      	movs	r3, #0
 8001c02:	73fb      	strb	r3, [r7, #15]
 8001c04:	e044      	b.n	8001c90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c06:	7bfa      	ldrb	r2, [r7, #15]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001c2e:	7bfa      	ldrb	r2, [r7, #15]
 8001c30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c8a:	7bfb      	ldrb	r3, [r7, #15]
 8001c8c:	3301      	adds	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	7bfa      	ldrb	r2, [r7, #15]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d3b5      	bcc.n	8001c06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	687e      	ldr	r6, [r7, #4]
 8001ca2:	466d      	mov	r5, sp
 8001ca4:	f106 0410 	add.w	r4, r6, #16
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb8:	1d33      	adds	r3, r6, #4
 8001cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cbc:	6838      	ldr	r0, [r7, #0]
 8001cbe:	f001 f833 	bl	8002d28 <USB_DevInit>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2202      	movs	r2, #2
 8001ccc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e00d      	b.n	8001cf0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 f9fe 	bl	80030ea <USB_DevDisconnect>

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e267      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d075      	beq.n	8001e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d16:	4b88      	ldr	r3, [pc, #544]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d00c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4b85      	ldr	r3, [pc, #532]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d112      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2e:	4b82      	ldr	r3, [pc, #520]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3a:	d10b      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	4b7e      	ldr	r3, [pc, #504]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d05b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x108>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d157      	bne.n	8001e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e242      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_OscConfig+0x74>
 8001d5e:	4b76      	ldr	r3, [pc, #472]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a75      	ldr	r2, [pc, #468]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e01d      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x98>
 8001d76:	4b70      	ldr	r3, [pc, #448]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a6f      	ldr	r2, [pc, #444]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b6d      	ldr	r3, [pc, #436]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6c      	ldr	r2, [pc, #432]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d90:	4b69      	ldr	r3, [pc, #420]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a68      	ldr	r2, [pc, #416]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a65      	ldr	r2, [pc, #404]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff f868 	bl	8000e84 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff f864 	bl	8000e84 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e207      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b5b      	ldr	r3, [pc, #364]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0xc0>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f854 	bl	8000e84 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff f850 	bl	8000e84 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	; 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1f3      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	4b51      	ldr	r3, [pc, #324]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0xe8>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d063      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d11c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e26:	4b44      	ldr	r3, [pc, #272]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d116      	bne.n	8001e60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_RCC_OscConfig+0x152>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e1c7      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4937      	ldr	r1, [pc, #220]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	e03a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e68:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <HAL_RCC_OscConfig+0x244>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f809 	bl	8000e84 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e76:	f7ff f805 	bl	8000e84 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1a8      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	4b2b      	ldr	r3, [pc, #172]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b28      	ldr	r3, [pc, #160]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4925      	ldr	r1, [pc, #148]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_OscConfig+0x244>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ffe8 	bl	8000e84 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7fe ffe4 	bl	8000e84 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e187      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d036      	beq.n	8001f50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eea:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <HAL_RCC_OscConfig+0x248>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7fe ffc8 	bl	8000e84 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7fe ffc4 	bl	8000e84 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e167      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x200>
 8001f16:	e01b      	b.n	8001f50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_OscConfig+0x248>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe ffb1 	bl	8000e84 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	e00e      	b.n	8001f44 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f26:	f7fe ffad 	bl	8000e84 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d907      	bls.n	8001f44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e150      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	42470000 	.word	0x42470000
 8001f40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f44:	4b88      	ldr	r3, [pc, #544]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ea      	bne.n	8001f26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8097 	beq.w	800208c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b81      	ldr	r3, [pc, #516]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	4b7d      	ldr	r3, [pc, #500]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	4a7c      	ldr	r2, [pc, #496]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7e:	4b7a      	ldr	r3, [pc, #488]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8e:	4b77      	ldr	r3, [pc, #476]	; (800216c <HAL_RCC_OscConfig+0x474>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9a:	4b74      	ldr	r3, [pc, #464]	; (800216c <HAL_RCC_OscConfig+0x474>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a73      	ldr	r2, [pc, #460]	; (800216c <HAL_RCC_OscConfig+0x474>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe ff6d 	bl	8000e84 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7fe ff69 	bl	8000e84 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e10c      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	4b6a      	ldr	r3, [pc, #424]	; (800216c <HAL_RCC_OscConfig+0x474>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x2ea>
 8001fd4:	4b64      	ldr	r3, [pc, #400]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd8:	4a63      	ldr	r2, [pc, #396]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe0:	e01c      	b.n	800201c <HAL_RCC_OscConfig+0x324>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x30c>
 8001fea:	4b5f      	ldr	r3, [pc, #380]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fee:	4a5e      	ldr	r2, [pc, #376]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffa:	4a5b      	ldr	r2, [pc, #364]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6713      	str	r3, [r2, #112]	; 0x70
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0x324>
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	4a57      	ldr	r2, [pc, #348]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	6713      	str	r3, [r2, #112]	; 0x70
 8002010:	4b55      	ldr	r3, [pc, #340]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002014:	4a54      	ldr	r2, [pc, #336]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8002016:	f023 0304 	bic.w	r3, r3, #4
 800201a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d015      	beq.n	8002050 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7fe ff2e 	bl	8000e84 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7fe ff2a 	bl	8000e84 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	; 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e0cb      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002042:	4b49      	ldr	r3, [pc, #292]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0ee      	beq.n	800202c <HAL_RCC_OscConfig+0x334>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe ff18 	bl	8000e84 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002056:	e00a      	b.n	800206e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7fe ff14 	bl	8000e84 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	; 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0b5      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206e:	4b3e      	ldr	r3, [pc, #248]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ee      	bne.n	8002058 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002080:	4b39      	ldr	r3, [pc, #228]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	4a38      	ldr	r2, [pc, #224]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8002086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80a1 	beq.w	80021d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002096:	4b34      	ldr	r3, [pc, #208]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d05c      	beq.n	800215c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d141      	bne.n	800212e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b31      	ldr	r3, [pc, #196]	; (8002170 <HAL_RCC_OscConfig+0x478>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fee8 	bl	8000e84 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fee4 	bl	8000e84 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e087      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	4b27      	ldr	r3, [pc, #156]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69da      	ldr	r2, [r3, #28]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	3b01      	subs	r3, #1
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	491b      	ldr	r1, [pc, #108]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b1b      	ldr	r3, [pc, #108]	; (8002170 <HAL_RCC_OscConfig+0x478>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe febd 	bl	8000e84 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800210e:	f7fe feb9 	bl	8000e84 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e05c      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x416>
 800212c:	e054      	b.n	80021d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_RCC_OscConfig+0x478>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe fea6 	bl	8000e84 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7fe fea2 	bl	8000e84 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e045      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_RCC_OscConfig+0x470>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x444>
 800215a:	e03d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d107      	bne.n	8002174 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e038      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
 8002168:	40023800 	.word	0x40023800
 800216c:	40007000 	.word	0x40007000
 8002170:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCC_OscConfig+0x4ec>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d028      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d121      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d11a      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021a4:	4013      	ands	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d111      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	3b01      	subs	r3, #1
 80021be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0cc      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b68      	ldr	r3, [pc, #416]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d90c      	bls.n	8002224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b65      	ldr	r3, [pc, #404]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b63      	ldr	r3, [pc, #396]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800223c:	4b59      	ldr	r3, [pc, #356]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a58      	ldr	r2, [pc, #352]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002246:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002254:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a52      	ldr	r2, [pc, #328]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800225e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	494d      	ldr	r1, [pc, #308]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d044      	beq.n	8002308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d119      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e07f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e06f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4b3b      	ldr	r3, [pc, #236]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e067      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c6:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 0203 	bic.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4934      	ldr	r1, [pc, #208]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d8:	f7fe fdd4 	bl	8000e84 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7fe fdd0 	bl	8000e84 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e04f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b2b      	ldr	r3, [pc, #172]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 020c 	and.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1eb      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b25      	ldr	r3, [pc, #148]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d20c      	bcs.n	8002330 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b22      	ldr	r3, [pc, #136]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b20      	ldr	r3, [pc, #128]	; (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e032      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233c:	4b19      	ldr	r3, [pc, #100]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4916      	ldr	r1, [pc, #88]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235a:	4b12      	ldr	r3, [pc, #72]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	490e      	ldr	r1, [pc, #56]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800236e:	f000 f821 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002372:	4602      	mov	r2, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	490a      	ldr	r1, [pc, #40]	; (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	5ccb      	ldrb	r3, [r1, r3]
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a09      	ldr	r2, [pc, #36]	; (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fd34 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00
 80023a4:	40023800 	.word	0x40023800
 80023a8:	08003230 	.word	0x08003230
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000004 	.word	0x20000004

080023b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b8:	b094      	sub	sp, #80	; 0x50
 80023ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	647b      	str	r3, [r7, #68]	; 0x44
 80023c0:	2300      	movs	r3, #0
 80023c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023c4:	2300      	movs	r3, #0
 80023c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023cc:	4b79      	ldr	r3, [pc, #484]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d00d      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x40>
 80023d8:	2b08      	cmp	r3, #8
 80023da:	f200 80e1 	bhi.w	80025a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x34>
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x3a>
 80023e6:	e0db      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e8:	4b73      	ldr	r3, [pc, #460]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023ec:	e0db      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ee:	4b73      	ldr	r3, [pc, #460]	; (80025bc <HAL_RCC_GetSysClockFreq+0x208>)
 80023f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023f2:	e0d8      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f4:	4b6f      	ldr	r3, [pc, #444]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fe:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d063      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240a:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	099b      	lsrs	r3, r3, #6
 8002410:	2200      	movs	r2, #0
 8002412:	63bb      	str	r3, [r7, #56]	; 0x38
 8002414:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
 800241e:	2300      	movs	r3, #0
 8002420:	637b      	str	r3, [r7, #52]	; 0x34
 8002422:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002426:	4622      	mov	r2, r4
 8002428:	462b      	mov	r3, r5
 800242a:	f04f 0000 	mov.w	r0, #0
 800242e:	f04f 0100 	mov.w	r1, #0
 8002432:	0159      	lsls	r1, r3, #5
 8002434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002438:	0150      	lsls	r0, r2, #5
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4621      	mov	r1, r4
 8002440:	1a51      	subs	r1, r2, r1
 8002442:	6139      	str	r1, [r7, #16]
 8002444:	4629      	mov	r1, r5
 8002446:	eb63 0301 	sbc.w	r3, r3, r1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002458:	4659      	mov	r1, fp
 800245a:	018b      	lsls	r3, r1, #6
 800245c:	4651      	mov	r1, sl
 800245e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002462:	4651      	mov	r1, sl
 8002464:	018a      	lsls	r2, r1, #6
 8002466:	4651      	mov	r1, sl
 8002468:	ebb2 0801 	subs.w	r8, r2, r1
 800246c:	4659      	mov	r1, fp
 800246e:	eb63 0901 	sbc.w	r9, r3, r1
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800247e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002486:	4690      	mov	r8, r2
 8002488:	4699      	mov	r9, r3
 800248a:	4623      	mov	r3, r4
 800248c:	eb18 0303 	adds.w	r3, r8, r3
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	462b      	mov	r3, r5
 8002494:	eb49 0303 	adc.w	r3, r9, r3
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024a6:	4629      	mov	r1, r5
 80024a8:	024b      	lsls	r3, r1, #9
 80024aa:	4621      	mov	r1, r4
 80024ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b0:	4621      	mov	r1, r4
 80024b2:	024a      	lsls	r2, r1, #9
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024ba:	2200      	movs	r2, #0
 80024bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80024be:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024c4:	f7fd fe92 	bl	80001ec <__aeabi_uldivmod>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4613      	mov	r3, r2
 80024ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d0:	e058      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	099b      	lsrs	r3, r3, #6
 80024d8:	2200      	movs	r2, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	4611      	mov	r1, r2
 80024de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	; 0x24
 80024e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024ec:	4642      	mov	r2, r8
 80024ee:	464b      	mov	r3, r9
 80024f0:	f04f 0000 	mov.w	r0, #0
 80024f4:	f04f 0100 	mov.w	r1, #0
 80024f8:	0159      	lsls	r1, r3, #5
 80024fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024fe:	0150      	lsls	r0, r2, #5
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4641      	mov	r1, r8
 8002506:	ebb2 0a01 	subs.w	sl, r2, r1
 800250a:	4649      	mov	r1, r9
 800250c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800251c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002520:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002524:	ebb2 040a 	subs.w	r4, r2, sl
 8002528:	eb63 050b 	sbc.w	r5, r3, fp
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	00eb      	lsls	r3, r5, #3
 8002536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800253a:	00e2      	lsls	r2, r4, #3
 800253c:	4614      	mov	r4, r2
 800253e:	461d      	mov	r5, r3
 8002540:	4643      	mov	r3, r8
 8002542:	18e3      	adds	r3, r4, r3
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	464b      	mov	r3, r9
 8002548:	eb45 0303 	adc.w	r3, r5, r3
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800255a:	4629      	mov	r1, r5
 800255c:	028b      	lsls	r3, r1, #10
 800255e:	4621      	mov	r1, r4
 8002560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002564:	4621      	mov	r1, r4
 8002566:	028a      	lsls	r2, r1, #10
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800256e:	2200      	movs	r2, #0
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	61fa      	str	r2, [r7, #28]
 8002574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002578:	f7fd fe38 	bl	80001ec <__aeabi_uldivmod>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4613      	mov	r3, r2
 8002582:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	3301      	adds	r3, #1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002594:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002596:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800259e:	e002      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3750      	adds	r7, #80	; 0x50
 80025ac:	46bd      	mov	sp, r7
 80025ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	00f42400 	.word	0x00f42400
 80025bc:	007a1200 	.word	0x007a1200

080025c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c4:	4b03      	ldr	r3, [pc, #12]	; (80025d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000000 	.word	0x20000000

080025d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025dc:	f7ff fff0 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	0a9b      	lsrs	r3, r3, #10
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4903      	ldr	r1, [pc, #12]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	08003240 	.word	0x08003240

08002600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002604:	f7ff ffdc 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	; (8002620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0b5b      	lsrs	r3, r3, #13
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	08003240 	.word	0x08003240

08002628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e03f      	b.n	80026ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fa64 	bl	8000b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2224      	movs	r2, #36	; 0x24
 8002658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800266a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f829 	bl	80026c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
	...

080026c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c8:	b0c0      	sub	sp, #256	; 0x100
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80026dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e0:	68d9      	ldr	r1, [r3, #12]
 80026e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	ea40 0301 	orr.w	r3, r0, r1
 80026ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	431a      	orrs	r2, r3
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002700:	695b      	ldr	r3, [r3, #20]
 8002702:	431a      	orrs	r2, r3
 8002704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800271c:	f021 010c 	bic.w	r1, r1, #12
 8002720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800272a:	430b      	orrs	r3, r1
 800272c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800272e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	695b      	ldr	r3, [r3, #20]
 8002736:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800273e:	6999      	ldr	r1, [r3, #24]
 8002740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	ea40 0301 	orr.w	r3, r0, r1
 800274a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800274c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b8f      	ldr	r3, [pc, #572]	; (8002990 <UART_SetConfig+0x2cc>)
 8002754:	429a      	cmp	r2, r3
 8002756:	d005      	beq.n	8002764 <UART_SetConfig+0xa0>
 8002758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	4b8d      	ldr	r3, [pc, #564]	; (8002994 <UART_SetConfig+0x2d0>)
 8002760:	429a      	cmp	r2, r3
 8002762:	d104      	bne.n	800276e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002764:	f7ff ff4c 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 8002768:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800276c:	e003      	b.n	8002776 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800276e:	f7ff ff33 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8002772:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277a:	69db      	ldr	r3, [r3, #28]
 800277c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002780:	f040 810c 	bne.w	800299c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002788:	2200      	movs	r2, #0
 800278a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800278e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002792:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002796:	4622      	mov	r2, r4
 8002798:	462b      	mov	r3, r5
 800279a:	1891      	adds	r1, r2, r2
 800279c:	65b9      	str	r1, [r7, #88]	; 0x58
 800279e:	415b      	adcs	r3, r3
 80027a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80027a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80027a6:	4621      	mov	r1, r4
 80027a8:	eb12 0801 	adds.w	r8, r2, r1
 80027ac:	4629      	mov	r1, r5
 80027ae:	eb43 0901 	adc.w	r9, r3, r1
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f04f 0300 	mov.w	r3, #0
 80027ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c6:	4690      	mov	r8, r2
 80027c8:	4699      	mov	r9, r3
 80027ca:	4623      	mov	r3, r4
 80027cc:	eb18 0303 	adds.w	r3, r8, r3
 80027d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80027d4:	462b      	mov	r3, r5
 80027d6:	eb49 0303 	adc.w	r3, r9, r3
 80027da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80027de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80027ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80027ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027f2:	460b      	mov	r3, r1
 80027f4:	18db      	adds	r3, r3, r3
 80027f6:	653b      	str	r3, [r7, #80]	; 0x50
 80027f8:	4613      	mov	r3, r2
 80027fa:	eb42 0303 	adc.w	r3, r2, r3
 80027fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002800:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002804:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002808:	f7fd fcf0 	bl	80001ec <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4b61      	ldr	r3, [pc, #388]	; (8002998 <UART_SetConfig+0x2d4>)
 8002812:	fba3 2302 	umull	r2, r3, r3, r2
 8002816:	095b      	lsrs	r3, r3, #5
 8002818:	011c      	lsls	r4, r3, #4
 800281a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800281e:	2200      	movs	r2, #0
 8002820:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002824:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002828:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800282c:	4642      	mov	r2, r8
 800282e:	464b      	mov	r3, r9
 8002830:	1891      	adds	r1, r2, r2
 8002832:	64b9      	str	r1, [r7, #72]	; 0x48
 8002834:	415b      	adcs	r3, r3
 8002836:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002838:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800283c:	4641      	mov	r1, r8
 800283e:	eb12 0a01 	adds.w	sl, r2, r1
 8002842:	4649      	mov	r1, r9
 8002844:	eb43 0b01 	adc.w	fp, r3, r1
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002854:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002858:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800285c:	4692      	mov	sl, r2
 800285e:	469b      	mov	fp, r3
 8002860:	4643      	mov	r3, r8
 8002862:	eb1a 0303 	adds.w	r3, sl, r3
 8002866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800286a:	464b      	mov	r3, r9
 800286c:	eb4b 0303 	adc.w	r3, fp, r3
 8002870:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002880:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002884:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002888:	460b      	mov	r3, r1
 800288a:	18db      	adds	r3, r3, r3
 800288c:	643b      	str	r3, [r7, #64]	; 0x40
 800288e:	4613      	mov	r3, r2
 8002890:	eb42 0303 	adc.w	r3, r2, r3
 8002894:	647b      	str	r3, [r7, #68]	; 0x44
 8002896:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800289a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800289e:	f7fd fca5 	bl	80001ec <__aeabi_uldivmod>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	4b3b      	ldr	r3, [pc, #236]	; (8002998 <UART_SetConfig+0x2d4>)
 80028aa:	fba3 2301 	umull	r2, r3, r3, r1
 80028ae:	095b      	lsrs	r3, r3, #5
 80028b0:	2264      	movs	r2, #100	; 0x64
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	1acb      	subs	r3, r1, r3
 80028b8:	00db      	lsls	r3, r3, #3
 80028ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80028be:	4b36      	ldr	r3, [pc, #216]	; (8002998 <UART_SetConfig+0x2d4>)
 80028c0:	fba3 2302 	umull	r2, r3, r3, r2
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80028cc:	441c      	add	r4, r3
 80028ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028d2:	2200      	movs	r2, #0
 80028d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80028d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80028dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80028e0:	4642      	mov	r2, r8
 80028e2:	464b      	mov	r3, r9
 80028e4:	1891      	adds	r1, r2, r2
 80028e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80028e8:	415b      	adcs	r3, r3
 80028ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028f0:	4641      	mov	r1, r8
 80028f2:	1851      	adds	r1, r2, r1
 80028f4:	6339      	str	r1, [r7, #48]	; 0x30
 80028f6:	4649      	mov	r1, r9
 80028f8:	414b      	adcs	r3, r1
 80028fa:	637b      	str	r3, [r7, #52]	; 0x34
 80028fc:	f04f 0200 	mov.w	r2, #0
 8002900:	f04f 0300 	mov.w	r3, #0
 8002904:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002908:	4659      	mov	r1, fp
 800290a:	00cb      	lsls	r3, r1, #3
 800290c:	4651      	mov	r1, sl
 800290e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002912:	4651      	mov	r1, sl
 8002914:	00ca      	lsls	r2, r1, #3
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	4603      	mov	r3, r0
 800291c:	4642      	mov	r2, r8
 800291e:	189b      	adds	r3, r3, r2
 8002920:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002924:	464b      	mov	r3, r9
 8002926:	460a      	mov	r2, r1
 8002928:	eb42 0303 	adc.w	r3, r2, r3
 800292c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800293c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002940:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002944:	460b      	mov	r3, r1
 8002946:	18db      	adds	r3, r3, r3
 8002948:	62bb      	str	r3, [r7, #40]	; 0x28
 800294a:	4613      	mov	r3, r2
 800294c:	eb42 0303 	adc.w	r3, r2, r3
 8002950:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002952:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002956:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800295a:	f7fd fc47 	bl	80001ec <__aeabi_uldivmod>
 800295e:	4602      	mov	r2, r0
 8002960:	460b      	mov	r3, r1
 8002962:	4b0d      	ldr	r3, [pc, #52]	; (8002998 <UART_SetConfig+0x2d4>)
 8002964:	fba3 1302 	umull	r1, r3, r3, r2
 8002968:	095b      	lsrs	r3, r3, #5
 800296a:	2164      	movs	r1, #100	; 0x64
 800296c:	fb01 f303 	mul.w	r3, r1, r3
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	3332      	adds	r3, #50	; 0x32
 8002976:	4a08      	ldr	r2, [pc, #32]	; (8002998 <UART_SetConfig+0x2d4>)
 8002978:	fba2 2303 	umull	r2, r3, r2, r3
 800297c:	095b      	lsrs	r3, r3, #5
 800297e:	f003 0207 	and.w	r2, r3, #7
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4422      	add	r2, r4
 800298a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800298c:	e106      	b.n	8002b9c <UART_SetConfig+0x4d8>
 800298e:	bf00      	nop
 8002990:	40011000 	.word	0x40011000
 8002994:	40011400 	.word	0x40011400
 8002998:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800299c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029a0:	2200      	movs	r2, #0
 80029a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80029a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80029aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80029ae:	4642      	mov	r2, r8
 80029b0:	464b      	mov	r3, r9
 80029b2:	1891      	adds	r1, r2, r2
 80029b4:	6239      	str	r1, [r7, #32]
 80029b6:	415b      	adcs	r3, r3
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029be:	4641      	mov	r1, r8
 80029c0:	1854      	adds	r4, r2, r1
 80029c2:	4649      	mov	r1, r9
 80029c4:	eb43 0501 	adc.w	r5, r3, r1
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	00eb      	lsls	r3, r5, #3
 80029d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029d6:	00e2      	lsls	r2, r4, #3
 80029d8:	4614      	mov	r4, r2
 80029da:	461d      	mov	r5, r3
 80029dc:	4643      	mov	r3, r8
 80029de:	18e3      	adds	r3, r4, r3
 80029e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029e4:	464b      	mov	r3, r9
 80029e6:	eb45 0303 	adc.w	r3, r5, r3
 80029ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80029ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029fe:	f04f 0200 	mov.w	r2, #0
 8002a02:	f04f 0300 	mov.w	r3, #0
 8002a06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a0a:	4629      	mov	r1, r5
 8002a0c:	008b      	lsls	r3, r1, #2
 8002a0e:	4621      	mov	r1, r4
 8002a10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a14:	4621      	mov	r1, r4
 8002a16:	008a      	lsls	r2, r1, #2
 8002a18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002a1c:	f7fd fbe6 	bl	80001ec <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4b60      	ldr	r3, [pc, #384]	; (8002ba8 <UART_SetConfig+0x4e4>)
 8002a26:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	011c      	lsls	r4, r3, #4
 8002a2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a32:	2200      	movs	r2, #0
 8002a34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002a38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002a3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002a40:	4642      	mov	r2, r8
 8002a42:	464b      	mov	r3, r9
 8002a44:	1891      	adds	r1, r2, r2
 8002a46:	61b9      	str	r1, [r7, #24]
 8002a48:	415b      	adcs	r3, r3
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a50:	4641      	mov	r1, r8
 8002a52:	1851      	adds	r1, r2, r1
 8002a54:	6139      	str	r1, [r7, #16]
 8002a56:	4649      	mov	r1, r9
 8002a58:	414b      	adcs	r3, r1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a68:	4659      	mov	r1, fp
 8002a6a:	00cb      	lsls	r3, r1, #3
 8002a6c:	4651      	mov	r1, sl
 8002a6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a72:	4651      	mov	r1, sl
 8002a74:	00ca      	lsls	r2, r1, #3
 8002a76:	4610      	mov	r0, r2
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4642      	mov	r2, r8
 8002a7e:	189b      	adds	r3, r3, r2
 8002a80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a84:	464b      	mov	r3, r9
 8002a86:	460a      	mov	r2, r1
 8002a88:	eb42 0303 	adc.w	r3, r2, r3
 8002a8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002aa8:	4649      	mov	r1, r9
 8002aaa:	008b      	lsls	r3, r1, #2
 8002aac:	4641      	mov	r1, r8
 8002aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ab2:	4641      	mov	r1, r8
 8002ab4:	008a      	lsls	r2, r1, #2
 8002ab6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002aba:	f7fd fb97 	bl	80001ec <__aeabi_uldivmod>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4611      	mov	r1, r2
 8002ac4:	4b38      	ldr	r3, [pc, #224]	; (8002ba8 <UART_SetConfig+0x4e4>)
 8002ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2264      	movs	r2, #100	; 0x64
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	1acb      	subs	r3, r1, r3
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	3332      	adds	r3, #50	; 0x32
 8002ad8:	4a33      	ldr	r2, [pc, #204]	; (8002ba8 <UART_SetConfig+0x4e4>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ae4:	441c      	add	r4, r3
 8002ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002aea:	2200      	movs	r2, #0
 8002aec:	673b      	str	r3, [r7, #112]	; 0x70
 8002aee:	677a      	str	r2, [r7, #116]	; 0x74
 8002af0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002af4:	4642      	mov	r2, r8
 8002af6:	464b      	mov	r3, r9
 8002af8:	1891      	adds	r1, r2, r2
 8002afa:	60b9      	str	r1, [r7, #8]
 8002afc:	415b      	adcs	r3, r3
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b04:	4641      	mov	r1, r8
 8002b06:	1851      	adds	r1, r2, r1
 8002b08:	6039      	str	r1, [r7, #0]
 8002b0a:	4649      	mov	r1, r9
 8002b0c:	414b      	adcs	r3, r1
 8002b0e:	607b      	str	r3, [r7, #4]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b1c:	4659      	mov	r1, fp
 8002b1e:	00cb      	lsls	r3, r1, #3
 8002b20:	4651      	mov	r1, sl
 8002b22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b26:	4651      	mov	r1, sl
 8002b28:	00ca      	lsls	r2, r1, #3
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	4642      	mov	r2, r8
 8002b32:	189b      	adds	r3, r3, r2
 8002b34:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b36:	464b      	mov	r3, r9
 8002b38:	460a      	mov	r2, r1
 8002b3a:	eb42 0303 	adc.w	r3, r2, r3
 8002b3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	663b      	str	r3, [r7, #96]	; 0x60
 8002b4a:	667a      	str	r2, [r7, #100]	; 0x64
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b58:	4649      	mov	r1, r9
 8002b5a:	008b      	lsls	r3, r1, #2
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b62:	4641      	mov	r1, r8
 8002b64:	008a      	lsls	r2, r1, #2
 8002b66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b6a:	f7fd fb3f 	bl	80001ec <__aeabi_uldivmod>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	460b      	mov	r3, r1
 8002b72:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <UART_SetConfig+0x4e4>)
 8002b74:	fba3 1302 	umull	r1, r3, r3, r2
 8002b78:	095b      	lsrs	r3, r3, #5
 8002b7a:	2164      	movs	r1, #100	; 0x64
 8002b7c:	fb01 f303 	mul.w	r3, r1, r3
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	3332      	adds	r3, #50	; 0x32
 8002b86:	4a08      	ldr	r2, [pc, #32]	; (8002ba8 <UART_SetConfig+0x4e4>)
 8002b88:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8c:	095b      	lsrs	r3, r3, #5
 8002b8e:	f003 020f 	and.w	r2, r3, #15
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4422      	add	r2, r4
 8002b9a:	609a      	str	r2, [r3, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ba8:	51eb851f 	.word	0x51eb851f

08002bac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bac:	b084      	sub	sp, #16
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	af00      	add	r7, sp, #0
 8002bb4:	6078      	str	r0, [r7, #4]
 8002bb6:	f107 001c 	add.w	r0, r7, #28
 8002bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d122      	bne.n	8002c0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002bd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d105      	bne.n	8002bfe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 faa2 	bl	8003148 <USB_CoreReset>
 8002c04:	4603      	mov	r3, r0
 8002c06:	73fb      	strb	r3, [r7, #15]
 8002c08:	e01a      	b.n	8002c40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 fa96 	bl	8003148 <USB_CoreReset>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	639a      	str	r2, [r3, #56]	; 0x38
 8002c32:	e005      	b.n	8002c40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d10b      	bne.n	8002c5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f043 0206 	orr.w	r2, r3, #6
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c6a:	b004      	add	sp, #16
 8002c6c:	4770      	bx	lr

08002c6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f023 0201 	bic.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	460b      	mov	r3, r1
 8002c9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d115      	bne.n	8002cde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002cbe:	2001      	movs	r0, #1
 8002cc0:	f7fe f8ec 	bl	8000e9c <HAL_Delay>
      ms++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 fa2e 	bl	800312c <USB_GetMode>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d01e      	beq.n	8002d14 <USB_SetCurrentMode+0x84>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b31      	cmp	r3, #49	; 0x31
 8002cda:	d9f0      	bls.n	8002cbe <USB_SetCurrentMode+0x2e>
 8002cdc:	e01a      	b.n	8002d14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d115      	bne.n	8002d10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	f7fe f8d3 	bl	8000e9c <HAL_Delay>
      ms++;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fa15 	bl	800312c <USB_GetMode>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d005      	beq.n	8002d14 <USB_SetCurrentMode+0x84>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b31      	cmp	r3, #49	; 0x31
 8002d0c:	d9f0      	bls.n	8002cf0 <USB_SetCurrentMode+0x60>
 8002d0e:	e001      	b.n	8002d14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e005      	b.n	8002d20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	2b32      	cmp	r3, #50	; 0x32
 8002d18:	d101      	bne.n	8002d1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d28:	b084      	sub	sp, #16
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002d36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	e009      	b.n	8002d5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	3340      	adds	r3, #64	; 0x40
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	2200      	movs	r2, #0
 8002d54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b0e      	cmp	r3, #14
 8002d60:	d9f2      	bls.n	8002d48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d11c      	bne.n	8002da2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d76:	f043 0302 	orr.w	r3, r3, #2
 8002d7a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
 8002da0:	e00b      	b.n	8002dba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dcc:	4619      	mov	r1, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	680b      	ldr	r3, [r1, #0]
 8002dd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d10c      	bne.n	8002dfa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d104      	bne.n	8002df0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002de6:	2100      	movs	r1, #0
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 f965 	bl	80030b8 <USB_SetDevSpeed>
 8002dee:	e008      	b.n	8002e02 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002df0:	2101      	movs	r1, #1
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f960 	bl	80030b8 <USB_SetDevSpeed>
 8002df8:	e003      	b.n	8002e02 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002dfa:	2103      	movs	r1, #3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f95b 	bl	80030b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e02:	2110      	movs	r1, #16
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f8f3 	bl	8002ff0 <USB_FlushTxFifo>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f91f 	bl	8003058 <USB_FlushRxFifo>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e36:	461a      	mov	r2, r3
 8002e38:	2300      	movs	r3, #0
 8002e3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e42:	461a      	mov	r2, r3
 8002e44:	2300      	movs	r3, #0
 8002e46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e48:	2300      	movs	r3, #0
 8002e4a:	613b      	str	r3, [r7, #16]
 8002e4c:	e043      	b.n	8002ed6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	015a      	lsls	r2, r3, #5
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e64:	d118      	bne.n	8002e98 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d10a      	bne.n	8002e82 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e78:	461a      	mov	r2, r3
 8002e7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	e013      	b.n	8002eaa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e8e:	461a      	mov	r2, r3
 8002e90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e008      	b.n	8002eaa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	015a      	lsls	r2, r3, #5
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec8:	461a      	mov	r2, r3
 8002eca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ece:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d3b7      	bcc.n	8002e4e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	e043      	b.n	8002f6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	015a      	lsls	r2, r3, #5
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4413      	add	r3, r2
 8002eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002efa:	d118      	bne.n	8002f2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	015a      	lsls	r2, r3, #5
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4413      	add	r3, r2
 8002f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f0e:	461a      	mov	r2, r3
 8002f10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f14:	6013      	str	r3, [r2, #0]
 8002f16:	e013      	b.n	8002f40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	015a      	lsls	r2, r3, #5
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4413      	add	r3, r2
 8002f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f24:	461a      	mov	r2, r3
 8002f26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e008      	b.n	8002f40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	015a      	lsls	r2, r3, #5
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4413      	add	r3, r2
 8002f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	2300      	movs	r3, #0
 8002f50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	015a      	lsls	r2, r3, #5
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4413      	add	r3, r2
 8002f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	3301      	adds	r3, #1
 8002f6a:	613b      	str	r3, [r7, #16]
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d3b7      	bcc.n	8002ee4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002f94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f043 0210 	orr.w	r2, r3, #16
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	699a      	ldr	r2, [r3, #24]
 8002fac:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <USB_DevInit+0x2c4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	687a      	ldr	r2, [r7, #4]
 8002fb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d005      	beq.n	8002fc6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f043 0208 	orr.w	r2, r3, #8
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002fc6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d107      	bne.n	8002fdc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002fd4:	f043 0304 	orr.w	r3, r3, #4
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fe8:	b004      	add	sp, #16
 8002fea:	4770      	bx	lr
 8002fec:	803c3800 	.word	0x803c3800

08002ff0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3301      	adds	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4a13      	ldr	r2, [pc, #76]	; (8003054 <USB_FlushTxFifo+0x64>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e01b      	b.n	8003048 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	2b00      	cmp	r3, #0
 8003016:	daf2      	bge.n	8002ffe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	019b      	lsls	r3, r3, #6
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	3301      	adds	r3, #1
 800302c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	4a08      	ldr	r2, [pc, #32]	; (8003054 <USB_FlushTxFifo+0x64>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e006      	b.n	8003048 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b20      	cmp	r3, #32
 8003044:	d0f0      	beq.n	8003028 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	00030d40 	.word	0x00030d40

08003058 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	3301      	adds	r3, #1
 8003068:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	4a11      	ldr	r2, [pc, #68]	; (80030b4 <USB_FlushRxFifo+0x5c>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e018      	b.n	80030a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	2b00      	cmp	r3, #0
 800307c:	daf2      	bge.n	8003064 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800307e:	2300      	movs	r3, #0
 8003080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2210      	movs	r2, #16
 8003086:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	3301      	adds	r3, #1
 800308c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a08      	ldr	r2, [pc, #32]	; (80030b4 <USB_FlushRxFifo+0x5c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e006      	b.n	80030a8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0310 	and.w	r3, r3, #16
 80030a2:	2b10      	cmp	r3, #16
 80030a4:	d0f0      	beq.n	8003088 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	00030d40 	.word	0x00030d40

080030b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	68f9      	ldr	r1, [r7, #12]
 80030d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3714      	adds	r7, #20
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80030ea:	b480      	push	{r7}
 80030ec:	b085      	sub	sp, #20
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68fa      	ldr	r2, [r7, #12]
 8003100:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003104:	f023 0303 	bic.w	r3, r3, #3
 8003108:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	f003 0301 	and.w	r3, r3, #1
}
 800313c:	4618      	mov	r0, r3
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	3301      	adds	r3, #1
 8003158:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	4a13      	ldr	r2, [pc, #76]	; (80031ac <USB_CoreReset+0x64>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d901      	bls.n	8003166 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e01b      	b.n	800319e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	daf2      	bge.n	8003154 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f043 0201 	orr.w	r2, r3, #1
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	3301      	adds	r3, #1
 8003182:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4a09      	ldr	r2, [pc, #36]	; (80031ac <USB_CoreReset+0x64>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d901      	bls.n	8003190 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800318c:	2303      	movs	r3, #3
 800318e:	e006      	b.n	800319e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	2b01      	cmp	r3, #1
 800319a:	d0f0      	beq.n	800317e <USB_CoreReset+0x36>

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr
 80031aa:	bf00      	nop
 80031ac:	00030d40 	.word	0x00030d40

080031b0 <memset>:
 80031b0:	4402      	add	r2, r0
 80031b2:	4603      	mov	r3, r0
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d100      	bne.n	80031ba <memset+0xa>
 80031b8:	4770      	bx	lr
 80031ba:	f803 1b01 	strb.w	r1, [r3], #1
 80031be:	e7f9      	b.n	80031b4 <memset+0x4>

080031c0 <__libc_init_array>:
 80031c0:	b570      	push	{r4, r5, r6, lr}
 80031c2:	4d0d      	ldr	r5, [pc, #52]	; (80031f8 <__libc_init_array+0x38>)
 80031c4:	4c0d      	ldr	r4, [pc, #52]	; (80031fc <__libc_init_array+0x3c>)
 80031c6:	1b64      	subs	r4, r4, r5
 80031c8:	10a4      	asrs	r4, r4, #2
 80031ca:	2600      	movs	r6, #0
 80031cc:	42a6      	cmp	r6, r4
 80031ce:	d109      	bne.n	80031e4 <__libc_init_array+0x24>
 80031d0:	4d0b      	ldr	r5, [pc, #44]	; (8003200 <__libc_init_array+0x40>)
 80031d2:	4c0c      	ldr	r4, [pc, #48]	; (8003204 <__libc_init_array+0x44>)
 80031d4:	f000 f818 	bl	8003208 <_init>
 80031d8:	1b64      	subs	r4, r4, r5
 80031da:	10a4      	asrs	r4, r4, #2
 80031dc:	2600      	movs	r6, #0
 80031de:	42a6      	cmp	r6, r4
 80031e0:	d105      	bne.n	80031ee <__libc_init_array+0x2e>
 80031e2:	bd70      	pop	{r4, r5, r6, pc}
 80031e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031e8:	4798      	blx	r3
 80031ea:	3601      	adds	r6, #1
 80031ec:	e7ee      	b.n	80031cc <__libc_init_array+0xc>
 80031ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f2:	4798      	blx	r3
 80031f4:	3601      	adds	r6, #1
 80031f6:	e7f2      	b.n	80031de <__libc_init_array+0x1e>
 80031f8:	08003250 	.word	0x08003250
 80031fc:	08003250 	.word	0x08003250
 8003200:	08003250 	.word	0x08003250
 8003204:	08003254 	.word	0x08003254

08003208 <_init>:
 8003208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800320a:	bf00      	nop
 800320c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800320e:	bc08      	pop	{r3}
 8003210:	469e      	mov	lr, r3
 8003212:	4770      	bx	lr

08003214 <_fini>:
 8003214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003216:	bf00      	nop
 8003218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321a:	bc08      	pop	{r3}
 800321c:	469e      	mov	lr, r3
 800321e:	4770      	bx	lr
